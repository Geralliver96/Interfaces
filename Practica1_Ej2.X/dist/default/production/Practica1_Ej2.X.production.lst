

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Nov 02 16:26:58 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    18   000000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4550 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53   000000                     _ADCON0	set	4034
    54   000000                     _TRISA	set	3986
    55   000000                     _PORTA	set	3968
    56   000000                     _LATA	set	3977
    57   000000                     _TRISAbits	set	3986
    58   000000                     _TRISC	set	3988
    59   000000                     _TRISD	set	3989
    60   000000                     _ADCON0bits	set	4034
    61   000000                     _ADRESH	set	4036
    62   000000                     _LATC	set	3979
    63   000000                     _PORTC	set	3970
    64   000000                     _LATD	set	3980
    65   000000                     _PORTD	set	3971
    66   000000                     _ADCON2	set	4032
    67   000000                     _ADCON1	set	4033
    68                           
    69                           ; #config settings
    70                           
    71                           	psect	cinit
    72   000954                     __pcinit:
    73                           	callstack 0
    74   000954                     start_initialization:
    75                           	callstack 0
    76   000954                     __initialization:
    77                           	callstack 0
    78                           
    79                           ; Clear objects allocated to COMRAM (13 bytes)
    80   000954  EE00  F001         	lfsr	0,__pbssCOMRAM
    81   000958  0E0D               	movlw	13
    82   00095A                     clear_0:
    83   00095A  6AEE               	clrf	postinc0,c
    84   00095C  06E8               	decf	wreg,f,c
    85   00095E  E1FD               	bnz	clear_0
    86   000960                     end_of_initialization:
    87                           	callstack 0
    88   000960                     __end_of__initialization:
    89                           	callstack 0
    90   000960  0E00               	movlw	low (__Lmediumconst shr (0+16))
    91   000962  6EF8               	movwf	tblptru,c
    92   000964  0100               	movlb	0
    93   000966  EF90  F004         	goto	_main	;jump to C main() function
    94                           
    95                           	psect	bssCOMRAM
    96   000001                     __pbssCOMRAM:
    97                           	callstack 0
    98   000001                     _valor_ch:
    99                           	callstack 0
   100   000001                     	ds	12
   101   00000D                     _seleccion:
   102                           	callstack 0
   103   00000D                     	ds	1
   104                           
   105                           	psect	cstackCOMRAM
   106   00000E                     __pcstackCOMRAM:
   107                           	callstack 0
   108   00000E                     ??_loop:
   109   00000E                     ?_ADC_Read:
   110                           	callstack 0
   111                           
   112                           ; 2 bytes @ 0x0
   113   00000E                     	ds	2
   114   000010                     ADC_Read@ch:
   115                           	callstack 0
   116                           
   117                           ; 1 bytes @ 0x2
   118   000010                     	ds	1
   119   000011                     
   120                           ; 1 bytes @ 0x3
   121 ;;
   122 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   123 ;;
   124 ;; *************** function _main *****************
   125 ;; Defined at:
   126 ;;		line 101 in file "Ejercicio_2.c"
   127 ;; Parameters:    Size  Location     Type
   128 ;;		None
   129 ;; Auto vars:     Size  Location     Type
   130 ;;		None
   131 ;; Return value:  Size  Location     Type
   132 ;;                  1    wreg      void 
   133 ;; Registers used:
   134 ;;		wreg, status,2, status,0, cstack
   135 ;; Tracked objects:
   136 ;;		On entry : 0/0
   137 ;;		On exit  : 0/0
   138 ;;		Unchanged: 0/0
   139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   140 ;;      Params:         0       0       0       0       0       0       0       0       0
   141 ;;      Locals:         0       0       0       0       0       0       0       0       0
   142 ;;      Temps:          0       0       0       0       0       0       0       0       0
   143 ;;      Totals:         0       0       0       0       0       0       0       0       0
   144 ;;Total ram usage:        0 bytes
   145 ;; Hardware stack levels required when called: 2
   146 ;; This function calls:
   147 ;;		_ADC_Init
   148 ;;		_leer_canales_ADC
   149 ;;		_loop
   150 ;; This function is called by:
   151 ;;		Startup code after reset
   152 ;; This function uses a non-reentrant model
   153 ;;
   154                           
   155                           	psect	text0
   156   000920                     __ptext0:
   157                           	callstack 0
   158   000920                     _main:
   159                           	callstack 29
   160   000920                     
   161                           ;Ejercicio_2.c: 103:     ADC_Init();
   162   000920  ECB5  F004         	call	_ADC_Init	;wreg free
   163   000924                     
   164                           ;Ejercicio_2.c: 106:     LATA = 0x00;
   165   000924  0E00               	movlw	0
   166   000926  6E89               	movwf	137,c	;volatile
   167   000928                     
   168                           ;Ejercicio_2.c: 107:     PORTA = 0x00;
   169   000928  0E00               	movlw	0
   170   00092A  6E80               	movwf	128,c	;volatile
   171   00092C                     
   172                           ;Ejercicio_2.c: 108:     TRISA |= 0b00001111;
   173   00092C  0E0F               	movlw	15
   174   00092E  1292               	iorwf	146,f,c	;volatile
   175   000930                     
   176                           ;Ejercicio_2.c: 111:     LATC = 0x00;
   177   000930  0E00               	movlw	0
   178   000932  6E8B               	movwf	139,c	;volatile
   179   000934                     
   180                           ;Ejercicio_2.c: 112:     PORTC = 0x00;
   181   000934  0E00               	movlw	0
   182   000936  6E82               	movwf	130,c	;volatile
   183   000938                     
   184                           ;Ejercicio_2.c: 116:     PORTD = 0x00;
   185   000938  0E00               	movlw	0
   186   00093A  6E83               	movwf	131,c	;volatile
   187   00093C                     
   188                           ;Ejercicio_2.c: 117:     LATD = 0x00;
   189   00093C  0E00               	movlw	0
   190   00093E  6E8C               	movwf	140,c	;volatile
   191   000940                     
   192                           ;Ejercicio_2.c: 118:     TRISD = 0b00000000;
   193   000940  0E00               	movlw	0
   194   000942  6E95               	movwf	149,c	;volatile
   195   000944                     l38:
   196                           
   197                           ;Ejercicio_2.c: 122:              leer_canales_ADC();
   198   000944  EC01  F004         	call	_leer_canales_ADC	;wreg free
   199                           
   200                           ;Ejercicio_2.c: 123:              loop();
   201   000948  EC40  F004         	call	_loop	;wreg free
   202   00094C  EFA2  F004         	goto	l38
   203   000950  EF00  F000         	goto	start
   204   000954                     __end_of_main:
   205                           	callstack 0
   206                           
   207 ;; *************** function _loop *****************
   208 ;; Defined at:
   209 ;;		line 31 in file "main_ej2.c"
   210 ;; Parameters:    Size  Location     Type
   211 ;;		None
   212 ;; Auto vars:     Size  Location     Type
   213 ;;		None
   214 ;; Return value:  Size  Location     Type
   215 ;;                  1    wreg      void 
   216 ;; Registers used:
   217 ;;		wreg, status,2, status,0
   218 ;; Tracked objects:
   219 ;;		On entry : 0/0
   220 ;;		On exit  : 0/0
   221 ;;		Unchanged: 0/0
   222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   223 ;;      Params:         0       0       0       0       0       0       0       0       0
   224 ;;      Locals:         0       0       0       0       0       0       0       0       0
   225 ;;      Temps:          2       0       0       0       0       0       0       0       0
   226 ;;      Totals:         2       0       0       0       0       0       0       0       0
   227 ;;Total ram usage:        2 bytes
   228 ;; Hardware stack levels used: 1
   229 ;; This function calls:
   230 ;;		Nothing
   231 ;; This function is called by:
   232 ;;		_main
   233 ;; This function uses a non-reentrant model
   234 ;;
   235                           
   236                           	psect	text1
   237   000880                     __ptext1:
   238                           	callstack 0
   239   000880                     _loop:
   240                           	callstack 30
   241   000880                     
   242                           ;main_ej2.c: 33:      TRISC = 0b00000011;
   243   000880  0E03               	movlw	3
   244   000882  6E94               	movwf	148,c	;volatile
   245   000884                     
   246                           ;main_ej2.c: 35:       seleccion = PORTC & 0x03;
   247   000884  5082               	movf	130,w,c	;volatile
   248   000886  0B03               	andlw	3
   249   000888  6E0D               	movwf	_seleccion^0,c
   250                           
   251                           ;main_ej2.c: 37:     switch (seleccion){
   252   00088A  EF57  F004         	goto	l797
   253   00088E                     l76:
   254                           
   255                           ;main_ej2.c: 39:         PORTD = (unsigned char)valor_ch[0];
   256   00088E  C001  FF83         	movff	_valor_ch,3971	;volatile
   257                           
   258                           ;main_ej2.c: 40:         break;
   259   000892  EF74  F004         	goto	l81
   260   000896                     l78:
   261                           
   262                           ;main_ej2.c: 42:         PORTD = (unsigned char)valor_ch[1];
   263   000896  C003  FF83         	movff	_valor_ch+2,3971	;volatile
   264                           
   265                           ;main_ej2.c: 43:         break;
   266   00089A  EF74  F004         	goto	l81
   267   00089E                     l79:
   268                           
   269                           ;main_ej2.c: 45:         PORTD = (unsigned char)valor_ch[2];
   270   00089E  C005  FF83         	movff	_valor_ch+4,3971	;volatile
   271                           
   272                           ;main_ej2.c: 46:         break;
   273   0008A2  EF74  F004         	goto	l81
   274   0008A6                     l80:
   275                           
   276                           ;main_ej2.c: 48:           PORTD = (unsigned char)valor_ch[3];
   277   0008A6  C007  FF83         	movff	_valor_ch+6,3971	;volatile
   278                           
   279                           ;main_ej2.c: 49:         break;
   280   0008AA  EF74  F004         	goto	l81
   281   0008AE                     l797:
   282   0008AE  500D               	movf	_seleccion^0,w,c
   283   0008B0  6E0E               	movwf	??_loop^0,c
   284   0008B2  6A0F               	clrf	(??_loop+1)^0,c
   285                           
   286                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   287                           ; Switch size 1, requested type "simple"
   288                           ; Number of cases is 1, Range of values is 0 to 0
   289                           ; switch strategies available:
   290                           ; Name         Instructions Cycles
   291                           ; simple_byte            4     3 (average)
   292                           ;	Chosen strategy is simple_byte
   293   0008B4  500F               	movf	(??_loop+1)^0,w,c
   294   0008B6  0A00               	xorlw	0	; case 0
   295   0008B8  B4D8               	btfsc	status,2,c
   296   0008BA  EF61  F004         	goto	l877
   297   0008BE  EF74  F004         	goto	l81
   298   0008C2                     l877:
   299                           
   300                           ; Switch size 1, requested type "simple"
   301                           ; Number of cases is 4, Range of values is 0 to 3
   302                           ; switch strategies available:
   303                           ; Name         Instructions Cycles
   304                           ; simple_byte           13     7 (average)
   305                           ;	Chosen strategy is simple_byte
   306   0008C2  500E               	movf	??_loop^0,w,c
   307   0008C4  0A00               	xorlw	0	; case 0
   308   0008C6  B4D8               	btfsc	status,2,c
   309   0008C8  EF47  F004         	goto	l76
   310   0008CC  0A01               	xorlw	1	; case 1
   311   0008CE  B4D8               	btfsc	status,2,c
   312   0008D0  EF4B  F004         	goto	l78
   313   0008D4  0A03               	xorlw	3	; case 2
   314   0008D6  B4D8               	btfsc	status,2,c
   315   0008D8  EF4F  F004         	goto	l79
   316   0008DC  0A01               	xorlw	1	; case 3
   317   0008DE  B4D8               	btfsc	status,2,c
   318   0008E0  EF53  F004         	goto	l80
   319   0008E4  EF74  F004         	goto	l81
   320   0008E8                     l81:
   321   0008E8  0012               	return		;funcret
   322   0008EA                     __end_of_loop:
   323                           	callstack 0
   324                           
   325 ;; *************** function _leer_canales_ADC *****************
   326 ;; Defined at:
   327 ;;		line 72 in file "Ejercicio_2.c"
   328 ;; Parameters:    Size  Location     Type
   329 ;;		None
   330 ;; Auto vars:     Size  Location     Type
   331 ;;		None
   332 ;; Return value:  Size  Location     Type
   333 ;;                  1    wreg      void 
   334 ;; Registers used:
   335 ;;		wreg, status,2, status,0, cstack
   336 ;; Tracked objects:
   337 ;;		On entry : 0/0
   338 ;;		On exit  : 0/0
   339 ;;		Unchanged: 0/0
   340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   341 ;;      Params:         0       0       0       0       0       0       0       0       0
   342 ;;      Locals:         0       0       0       0       0       0       0       0       0
   343 ;;      Temps:          0       0       0       0       0       0       0       0       0
   344 ;;      Totals:         0       0       0       0       0       0       0       0       0
   345 ;;Total ram usage:        0 bytes
   346 ;; Hardware stack levels used: 1
   347 ;; Hardware stack levels required when called: 1
   348 ;; This function calls:
   349 ;;		_ADC_Read
   350 ;; This function is called by:
   351 ;;		_main
   352 ;; This function uses a non-reentrant model
   353 ;;
   354                           
   355                           	psect	text2
   356   000802                     __ptext2:
   357                           	callstack 0
   358   000802                     _leer_canales_ADC:
   359                           	callstack 29
   360   000802                     
   361                           ;Ejercicio_2.c: 74:        TRISAbits.RA0 = 1;
   362   000802  8092               	bsf	146,0,c	;volatile
   363                           
   364                           ;Ejercicio_2.c: 75:    TRISAbits.RA1 = 1;
   365   000804  8292               	bsf	146,1,c	;volatile
   366                           
   367                           ;Ejercicio_2.c: 76:    TRISAbits.RA2 = 1;
   368   000806  8492               	bsf	146,2,c	;volatile
   369                           
   370                           ;Ejercicio_2.c: 77:    TRISAbits.RA3 = 1;
   371   000808  8692               	bsf	146,3,c	;volatile
   372   00080A                     
   373                           ;Ejercicio_2.c: 80:   ADCON0bits.CHS = 0;
   374   00080A  0EC3               	movlw	-61
   375   00080C  16C2               	andwf	194,f,c	;volatile
   376   00080E                     
   377                           ;Ejercicio_2.c: 81:   _delay((unsigned long)((10)*(20000000/4000000.0)));
   378   00080E  0E10               	movlw	16
   379   000810                     u57:
   380   000810  2EE8               	decfsz	wreg,f,c
   381   000812  D7FE               	bra	u57
   382   000814  D000               	nop2	
   383   000816                     
   384                           ;Ejercicio_2.c: 82:   valor_ch[0] = ADC_Read(0);
   385   000816  0E00               	movlw	0
   386   000818  EC75  F004         	call	_ADC_Read
   387   00081C  C00E  F001         	movff	?_ADC_Read,_valor_ch
   388   000820  C00F  F002         	movff	?_ADC_Read+1,_valor_ch+1
   389   000824                     
   390                           ;Ejercicio_2.c: 84:   ADCON0bits.CHS = 1;
   391   000824  50C2               	movf	194,w,c	;volatile
   392   000826  0BC3               	andlw	-61
   393   000828  0904               	iorlw	4
   394   00082A  6EC2               	movwf	194,c	;volatile
   395   00082C                     
   396                           ;Ejercicio_2.c: 85:   _delay((unsigned long)((10)*(20000000/4000000.0)));
   397   00082C  0E10               	movlw	16
   398   00082E                     u67:
   399   00082E  2EE8               	decfsz	wreg,f,c
   400   000830  D7FE               	bra	u67
   401   000832  D000               	nop2	
   402                           
   403                           ;Ejercicio_2.c: 86:   valor_ch[1] = ADC_Read(1);
   404   000834  0E01               	movlw	1
   405   000836  EC75  F004         	call	_ADC_Read
   406   00083A  C00E  F003         	movff	?_ADC_Read,_valor_ch+2
   407   00083E  C00F  F004         	movff	?_ADC_Read+1,_valor_ch+3
   408   000842                     
   409                           ;Ejercicio_2.c: 88:    ADCON0bits.CHS = 2;
   410   000842  50C2               	movf	194,w,c	;volatile
   411   000844  0BC3               	andlw	-61
   412   000846  0908               	iorlw	8
   413   000848  6EC2               	movwf	194,c	;volatile
   414   00084A                     
   415                           ;Ejercicio_2.c: 89:   _delay((unsigned long)((10)*(20000000/4000000.0)));
   416   00084A  0E10               	movlw	16
   417   00084C                     u77:
   418   00084C  2EE8               	decfsz	wreg,f,c
   419   00084E  D7FE               	bra	u77
   420   000850  D000               	nop2	
   421   000852                     
   422                           ;Ejercicio_2.c: 90:   valor_ch[2] = ADC_Read(2);
   423   000852  0E02               	movlw	2
   424   000854  EC75  F004         	call	_ADC_Read
   425   000858  C00E  F005         	movff	?_ADC_Read,_valor_ch+4
   426   00085C  C00F  F006         	movff	?_ADC_Read+1,_valor_ch+5
   427   000860                     
   428                           ;Ejercicio_2.c: 92:    ADCON0bits.CHS = 3;
   429   000860  50C2               	movf	194,w,c	;volatile
   430   000862  0BC3               	andlw	-61
   431   000864  090C               	iorlw	12
   432   000866  6EC2               	movwf	194,c	;volatile
   433                           
   434                           ;Ejercicio_2.c: 93:   _delay((unsigned long)((10)*(20000000/4000000.0)));
   435   000868  0E10               	movlw	16
   436   00086A                     u87:
   437   00086A  2EE8               	decfsz	wreg,f,c
   438   00086C  D7FE               	bra	u87
   439   00086E  D000               	nop2	
   440   000870                     
   441                           ;Ejercicio_2.c: 94:   valor_ch[3] = ADC_Read(3);
   442   000870  0E03               	movlw	3
   443   000872  EC75  F004         	call	_ADC_Read
   444   000876  C00E  F007         	movff	?_ADC_Read,_valor_ch+6
   445   00087A  C00F  F008         	movff	?_ADC_Read+1,_valor_ch+7
   446   00087E  0012               	return		;funcret
   447   000880                     __end_of_leer_canales_ADC:
   448                           	callstack 0
   449                           
   450 ;; *************** function _ADC_Read *****************
   451 ;; Defined at:
   452 ;;		line 19 in file "main_ej2.c"
   453 ;; Parameters:    Size  Location     Type
   454 ;;  ch              1    wreg     unsigned char 
   455 ;; Auto vars:     Size  Location     Type
   456 ;;  ch              1    2[COMRAM] unsigned char 
   457 ;; Return value:  Size  Location     Type
   458 ;;                  2    0[COMRAM] unsigned int 
   459 ;; Registers used:
   460 ;;		wreg, status,2, status,0
   461 ;; Tracked objects:
   462 ;;		On entry : 0/0
   463 ;;		On exit  : 0/0
   464 ;;		Unchanged: 0/0
   465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   466 ;;      Params:         2       0       0       0       0       0       0       0       0
   467 ;;      Locals:         1       0       0       0       0       0       0       0       0
   468 ;;      Temps:          0       0       0       0       0       0       0       0       0
   469 ;;      Totals:         3       0       0       0       0       0       0       0       0
   470 ;;Total ram usage:        3 bytes
   471 ;; Hardware stack levels used: 1
   472 ;; This function calls:
   473 ;;		Nothing
   474 ;; This function is called by:
   475 ;;		_leer_canales_ADC
   476 ;; This function uses a non-reentrant model
   477 ;;
   478                           
   479                           	psect	text3
   480   0008EA                     __ptext3:
   481                           	callstack 0
   482   0008EA                     _ADC_Read:
   483                           	callstack 29
   484                           
   485                           ;incstack = 0
   486                           ;ADC_Read@ch stored from wreg
   487   0008EA  6E10               	movwf	ADC_Read@ch^0,c
   488   0008EC                     
   489                           ;main_ej2.c: 20:     if(ch>13){
   490   0008EC  0E0D               	movlw	13
   491   0008EE  6410               	cpfsgt	ADC_Read@ch^0,c
   492   0008F0  EF7C  F004         	goto	u31
   493   0008F4  EF7E  F004         	goto	u30
   494   0008F8                     u31:
   495   0008F8  EF84  F004         	goto	l67
   496   0008FC                     u30:
   497   0008FC                     
   498                           ;main_ej2.c: 21:         return 0;
   499   0008FC  0E00               	movlw	0
   500   0008FE  6E0F               	movwf	(?_ADC_Read+1)^0,c
   501   000900  0E00               	movlw	0
   502   000902  6E0E               	movwf	?_ADC_Read^0,c
   503   000904  EF8F  F004         	goto	l68
   504   000908                     l67:
   505                           
   506                           ;main_ej2.c: 23:        ADCON0bits.GO_DONE = 1;
   507   000908  82C2               	bsf	194,1,c	;volatile
   508   00090A                     l70:
   509   00090A  B2C2               	btfsc	194,1,c	;volatile
   510   00090C  EF8A  F004         	goto	u41
   511   000910  EF8C  F004         	goto	u40
   512   000914                     u41:
   513   000914  EF85  F004         	goto	l70
   514   000918                     u40:
   515   000918                     
   516                           ;main_ej2.c: 27:   return ADRESH;
   517   000918  CFC4 F00E          	movff	4036,?_ADC_Read	;volatile
   518   00091C  6A0F               	clrf	(?_ADC_Read+1)^0,c
   519   00091E                     l68:
   520   00091E  0012               	return		;funcret
   521   000920                     __end_of_ADC_Read:
   522                           	callstack 0
   523                           
   524 ;; *************** function _ADC_Init *****************
   525 ;; Defined at:
   526 ;;		line 10 in file "main_ej2.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;		None
   531 ;; Return value:  Size  Location     Type
   532 ;;                  1    wreg      void 
   533 ;; Registers used:
   534 ;;		wreg, status,2
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   540 ;;      Params:         0       0       0       0       0       0       0       0       0
   541 ;;      Locals:         0       0       0       0       0       0       0       0       0
   542 ;;      Temps:          0       0       0       0       0       0       0       0       0
   543 ;;      Totals:         0       0       0       0       0       0       0       0       0
   544 ;;Total ram usage:        0 bytes
   545 ;; Hardware stack levels used: 1
   546 ;; This function calls:
   547 ;;		Nothing
   548 ;; This function is called by:
   549 ;;		_main
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           	psect	text4
   554   00096A                     __ptext4:
   555                           	callstack 0
   556   00096A                     _ADC_Init:
   557                           	callstack 30
   558   00096A                     
   559                           ;main_ej2.c: 12:     ADCON0 = 0x00;
   560   00096A  0E00               	movlw	0
   561   00096C  6EC2               	movwf	194,c	;volatile
   562                           
   563                           ;main_ej2.c: 13:   ADCON1 = 0x0A;
   564   00096E  0E0A               	movlw	10
   565   000970  6EC1               	movwf	193,c	;volatile
   566                           
   567                           ;main_ej2.c: 14:   ADCON2 = 0b00010111;
   568   000972  0E17               	movlw	23
   569   000974  6EC0               	movwf	192,c	;volatile
   570   000976                     
   571                           ;main_ej2.c: 16:   ADCON0bits.ADON = 1;
   572   000976  80C2               	bsf	194,0,c	;volatile
   573   000978  0012               	return		;funcret
   574   00097A                     __end_of_ADC_Init:
   575                           	callstack 0
   576                           
   577                           	psect	smallconst
   578   000800                     __psmallconst:
   579                           	callstack 0
   580   000800  00                 	db	0
   581   000801  00                 	db	0	; dummy byte at the end
   582   000000                     
   583                           	psect	rparam
   584   000000                     
   585                           	psect	idloc
   586                           
   587                           ;Config register IDLOC0 @ 0x200000
   588                           ;	unspecified, using default values
   589   200000                     	org	2097152
   590   200000  FF                 	db	255
   591                           
   592                           ;Config register IDLOC1 @ 0x200001
   593                           ;	unspecified, using default values
   594   200001                     	org	2097153
   595   200001  FF                 	db	255
   596                           
   597                           ;Config register IDLOC2 @ 0x200002
   598                           ;	unspecified, using default values
   599   200002                     	org	2097154
   600   200002  FF                 	db	255
   601                           
   602                           ;Config register IDLOC3 @ 0x200003
   603                           ;	unspecified, using default values
   604   200003                     	org	2097155
   605   200003  FF                 	db	255
   606                           
   607                           ;Config register IDLOC4 @ 0x200004
   608                           ;	unspecified, using default values
   609   200004                     	org	2097156
   610   200004  FF                 	db	255
   611                           
   612                           ;Config register IDLOC5 @ 0x200005
   613                           ;	unspecified, using default values
   614   200005                     	org	2097157
   615   200005  FF                 	db	255
   616                           
   617                           ;Config register IDLOC6 @ 0x200006
   618                           ;	unspecified, using default values
   619   200006                     	org	2097158
   620   200006  FF                 	db	255
   621                           
   622                           ;Config register IDLOC7 @ 0x200007
   623                           ;	unspecified, using default values
   624   200007                     	org	2097159
   625   200007  FF                 	db	255
   626                           
   627                           	psect	config
   628                           
   629                           ;Config register CONFIG1L @ 0x300000
   630                           ;	PLL Prescaler Selection bits
   631                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   632                           ;	System Clock Postscaler Selection bits
   633                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   634                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   635                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   636   300000                     	org	3145728
   637   300000  00                 	db	0
   638                           
   639                           ;Config register CONFIG1H @ 0x300001
   640                           ;	Oscillator Selection bits
   641                           ;	FOSC = HS, HS oscillator (HS)
   642                           ;	Fail-Safe Clock Monitor Enable bit
   643                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   644                           ;	Internal/External Oscillator Switchover bit
   645                           ;	IESO = OFF, Oscillator Switchover mode disabled
   646   300001                     	org	3145729
   647   300001  0C                 	db	12
   648                           
   649                           ;Config register CONFIG2L @ 0x300002
   650                           ;	Power-up Timer Enable bit
   651                           ;	PWRT = OFF, PWRT disabled
   652                           ;	Brown-out Reset Enable bits
   653                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   654                           ;	Brown-out Reset Voltage bits
   655                           ;	BORV = 3, Minimum setting 2.05V
   656                           ;	USB Voltage Regulator Enable bit
   657                           ;	VREGEN = OFF, USB voltage regulator disabled
   658   300002                     	org	3145730
   659   300002  1F                 	db	31
   660                           
   661                           ;Config register CONFIG2H @ 0x300003
   662                           ;	Watchdog Timer Enable bit
   663                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   664                           ;	Watchdog Timer Postscale Select bits
   665                           ;	WDTPS = 32768, 1:32768
   666   300003                     	org	3145731
   667   300003  1E                 	db	30
   668                           
   669                           ; Padding undefined space
   670   300004                     	org	3145732
   671   300004  FF                 	db	255
   672                           
   673                           ;Config register CONFIG3H @ 0x300005
   674                           ;	CCP2 MUX bit
   675                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   676                           ;	PORTB A/D Enable bit
   677                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   678                           ;	Low-Power Timer 1 Oscillator Enable bit
   679                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   680                           ;	MCLR Pin Enable bit
   681                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   682   300005                     	org	3145733
   683   300005  83                 	db	131
   684                           
   685                           ;Config register CONFIG4L @ 0x300006
   686                           ;	Stack Full/Underflow Reset Enable bit
   687                           ;	STVREN = ON, Stack full/underflow will cause Reset
   688                           ;	Single-Supply ICSP Enable bit
   689                           ;	LVP = ON, Single-Supply ICSP enabled
   690                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   691                           ;	ICPRT = OFF, ICPORT disabled
   692                           ;	Extended Instruction Set Enable bit
   693                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   694                           ;	Background Debugger Enable bit
   695                           ;	DEBUG = 0x1, unprogrammed default
   696   300006                     	org	3145734
   697   300006  85                 	db	133
   698                           
   699                           ; Padding undefined space
   700   300007                     	org	3145735
   701   300007  FF                 	db	255
   702                           
   703                           ;Config register CONFIG5L @ 0x300008
   704                           ;	Code Protection bit
   705                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   706                           ;	Code Protection bit
   707                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   708                           ;	Code Protection bit
   709                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   710                           ;	Code Protection bit
   711                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   712   300008                     	org	3145736
   713   300008  0F                 	db	15
   714                           
   715                           ;Config register CONFIG5H @ 0x300009
   716                           ;	Boot Block Code Protection bit
   717                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   718                           ;	Data EEPROM Code Protection bit
   719                           ;	CPD = OFF, Data EEPROM is not code-protected
   720   300009                     	org	3145737
   721   300009  C0                 	db	192
   722                           
   723                           ;Config register CONFIG6L @ 0x30000A
   724                           ;	Write Protection bit
   725                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   726                           ;	Write Protection bit
   727                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   728                           ;	Write Protection bit
   729                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   730                           ;	Write Protection bit
   731                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   732   30000A                     	org	3145738
   733   30000A  0F                 	db	15
   734                           
   735                           ;Config register CONFIG6H @ 0x30000B
   736                           ;	Configuration Register Write Protection bit
   737                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   738                           ;	Boot Block Write Protection bit
   739                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   740                           ;	Data EEPROM Write Protection bit
   741                           ;	WRTD = OFF, Data EEPROM is not write-protected
   742   30000B                     	org	3145739
   743   30000B  E0                 	db	224
   744                           
   745                           ;Config register CONFIG7L @ 0x30000C
   746                           ;	Table Read Protection bit
   747                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   748                           ;	Table Read Protection bit
   749                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   750                           ;	Table Read Protection bit
   751                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   752                           ;	Table Read Protection bit
   753                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   754   30000C                     	org	3145740
   755   30000C  0F                 	db	15
   756                           
   757                           ;Config register CONFIG7H @ 0x30000D
   758                           ;	Boot Block Table Read Protection bit
   759                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   760   30000D                     	org	3145741
   761   30000D  40                 	db	64
   762                           tosu	equ	0xFFF
   763                           tosh	equ	0xFFE
   764                           tosl	equ	0xFFD
   765                           stkptr	equ	0xFFC
   766                           pclatu	equ	0xFFB
   767                           pclath	equ	0xFFA
   768                           pcl	equ	0xFF9
   769                           tblptru	equ	0xFF8
   770                           tblptrh	equ	0xFF7
   771                           tblptrl	equ	0xFF6
   772                           tablat	equ	0xFF5
   773                           prodh	equ	0xFF4
   774                           prodl	equ	0xFF3
   775                           indf0	equ	0xFEF
   776                           postinc0	equ	0xFEE
   777                           postdec0	equ	0xFED
   778                           preinc0	equ	0xFEC
   779                           plusw0	equ	0xFEB
   780                           fsr0h	equ	0xFEA
   781                           fsr0l	equ	0xFE9
   782                           wreg	equ	0xFE8
   783                           indf1	equ	0xFE7
   784                           postinc1	equ	0xFE6
   785                           postdec1	equ	0xFE5
   786                           preinc1	equ	0xFE4
   787                           plusw1	equ	0xFE3
   788                           fsr1h	equ	0xFE2
   789                           fsr1l	equ	0xFE1
   790                           bsr	equ	0xFE0
   791                           indf2	equ	0xFDF
   792                           postinc2	equ	0xFDE
   793                           postdec2	equ	0xFDD
   794                           preinc2	equ	0xFDC
   795                           plusw2	equ	0xFDB
   796                           fsr2h	equ	0xFDA
   797                           fsr2l	equ	0xFD9
   798                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      3      16
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _leer_canales_ADC->_ADC_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      22
                           _ADC_Init
                   _leer_canales_ADC
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                 2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _leer_canales_ADC                                     0     0      0      22
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             3     1      2      22
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _leer_canales_ADC
     _ADC_Read
   _loop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      3      10       1       16.8%
BITBIGSFRhhh        3B      0       0      20        0.0%
BITBIGSFRhlh        2A      0       0      22        0.0%
BITBIGSFRlll        20      0       0      28        0.0%
BITBIGSFRllhh        5      0       0      26        0.0%
BITBIGSFRlhh         5      0       0      24        0.0%
BITBIGSFRllhl        1      0       0      27        0.0%
BITBIGSFRlhl         1      0       0      25        0.0%
BITBIGSFRhhl         1      0       0      21        0.0%
BITBIGSFRhll         1      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      10      29        0.0%
DATA                 0      0      10       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Nov 02 16:26:58 2023

__end_of_leer_canales_ADC 0880                        l33 087E                        l70 090A  
                      l38 0944                        l64 0978                        l72 0918  
                      l80 08A6                        l81 08E8                        l67 0908  
                      l68 091E                        l76 088E                        l78 0896  
                      l79 089E                        u30 08FC                        u31 08F8  
                      u40 0918                        u41 0914                        u57 0810  
                      u67 082E                        u77 084C                        u87 086A  
                     l825 08EC                       l841 0824                       l833 0802  
                     l827 08FC                       l851 0860                       l843 082C  
                     l835 080A                       l853 0870                       l845 0842  
                     l837 080E                       l861 092C                       l847 084A  
                     l839 0816                       l791 0880                       l871 0940  
                     l863 0930                       l855 0920                       l849 0852  
                     l793 0884                       l865 0934                       l857 0924  
                     l787 096A                       l867 0938                       l859 0928  
                     l789 0976                       l877 08C2                       l797 08AE  
                     l869 093C                       wreg 0FE8                      _LATA 0F89  
                    _LATC 0F8B                      _LATD 0F8C                      _main 0920  
                    _loop 0880          __end_of_ADC_Init 097A          __end_of_ADC_Read 0920  
                    start 0000              ___param_bank 0000                     ?_main 000E  
                   ?_loop 000E                     _PORTA 0F80                     _PORTC 0F82  
                   _PORTD 0F83                     _TRISA 0F92                     _TRISC 0F94  
                   _TRISD 0F95                     status 0FD8           __initialization 0954  
            __end_of_main 0954              __end_of_loop 08EA                    ??_main 0011  
                  ??_loop 000E             __activetblptr 0002                    _ADCON0 0FC2  
                  _ADCON1 0FC1                    _ADCON2 0FC0                    _ADRESH 0FC4  
                  clear_0 095A                    isa$std 0001                 ?_ADC_Init 000E  
               ?_ADC_Read 000E              __mediumconst 0000                    tblptru 0FF8  
              __accesstop 0060   __end_of__initialization 0960             ___rparam_used 0001  
          __pcstackCOMRAM 000E         ?_leer_canales_ADC 000E        ??_leer_canales_ADC 0011  
              ??_ADC_Init 000E                ??_ADC_Read 0010                ADC_Read@ch 0010  
                 __Hparam 0000                   __Lparam 0000              __psmallconst 0800  
                 __pcinit 0954                   __ramtop 0800                   __ptext0 0920  
                 __ptext1 0880                   __ptext2 0802                   __ptext3 08EA  
                 __ptext4 096A      end_of_initialization 0960             __Lmediumconst 0000  
                 postinc0 0FEE                 _TRISAbits 0F92       start_initialization 0954  
             __pbssCOMRAM 0001               __smallconst 0800                  _ADC_Init 096A  
                _ADC_Read 08EA                 _seleccion 000D                _ADCON0bits 0FC2  
        _leer_canales_ADC 0802                  __Hrparam 0000                  __Lrparam 0000  
                _valor_ch 0001                  isa$xinst 0000  
