

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Sep 30 15:56:26 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    36  0000                     
    37                           ; Version 2.20
    38                           ; Generated 12/02/2020 GMT
    39                           ; 
    40                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     _ADRES	set	4035
    72  0000                     _TRISDbits	set	3989
    73  0000                     _LATDbits	set	3980
    74  0000                     _ADCON0bits	set	4034
    75  0000                     _ADCON2	set	4032
    76  0000                     _ADCON0	set	4034
    77  0000                     _ADCON1	set	4033
    78                           
    79                           	psect	smallconst
    80  000800                     __psmallconst:
    81                           	callstack 0
    82  000800  00                 	db	0
    83  000801                     STR_1:
    84  000801  41                 	db	65	;'A'
    85  000802  44                 	db	68	;'D'
    86  000803  43                 	db	67	;'C'
    87  000804  20                 	db	32
    88  000805  43                 	db	67	;'C'
    89  000806  61                 	db	97	;'a'
    90  000807  6E                 	db	110	;'n'
    91  000808  61                 	db	97	;'a'
    92  000809  6C                 	db	108	;'l'
    93  00080A  20                 	db	32
    94  00080B  30                 	db	48	;'0'
    95  00080C  3A                 	db	58	;':'
    96  00080D  20                 	db	32
    97  00080E  25                 	db	37
    98  00080F  75                 	db	117	;'u'
    99  000810  20                 	db	32
   100  000811  20                 	db	32
   101  000812  20                 	db	32
   102  000813  00                 	db	0
   103  000814                     STR_2:
   104  000814  41                 	db	65	;'A'
   105  000815  44                 	db	68	;'D'
   106  000816  43                 	db	67	;'C'
   107  000817  20                 	db	32
   108  000818  43                 	db	67	;'C'
   109  000819  61                 	db	97	;'a'
   110  00081A  6E                 	db	110	;'n'
   111  00081B  61                 	db	97	;'a'
   112  00081C  6C                 	db	108	;'l'
   113  00081D  20                 	db	32
   114  00081E  31                 	db	49	;'1'
   115  00081F  3A                 	db	58	;':'
   116  000820  20                 	db	32
   117  000821  25                 	db	37
   118  000822  75                 	db	117	;'u'
   119  000823  20                 	db	32
   120  000824  20                 	db	32
   121  000825  20                 	db	32
   122  000826  00                 	db	0
   123  000827                     STR_3:
   124  000827  41                 	db	65	;'A'
   125  000828  44                 	db	68	;'D'
   126  000829  43                 	db	67	;'C'
   127  00082A  20                 	db	32
   128  00082B  43                 	db	67	;'C'
   129  00082C  61                 	db	97	;'a'
   130  00082D  6E                 	db	110	;'n'
   131  00082E  61                 	db	97	;'a'
   132  00082F  6C                 	db	108	;'l'
   133  000830  20                 	db	32
   134  000831  32                 	db	50	;'2'
   135  000832  3A                 	db	58	;':'
   136  000833  20                 	db	32
   137  000834  25                 	db	37
   138  000835  75                 	db	117	;'u'
   139  000836  20                 	db	32
   140  000837  20                 	db	32
   141  000838  20                 	db	32
   142  000839  00                 	db	0
   143  00083A  00                 	db	0	; dummy byte at the end
   144  0000                     
   145                           ; #config settings
   146                           
   147                           	psect	cinit
   148  0013C6                     __pcinit:
   149                           	callstack 0
   150  0013C6                     start_initialization:
   151                           	callstack 0
   152  0013C6                     __initialization:
   153                           	callstack 0
   154                           
   155                           ; Clear objects allocated to BANK0 (58 bytes)
   156  0013C6  EE00  F060         	lfsr	0,__pbssBANK0
   157  0013CA  0E3A               	movlw	58
   158  0013CC                     clear_0:
   159  0013CC  6AEE               	clrf	postinc0,c
   160  0013CE  06E8               	decf	wreg,f,c
   161  0013D0  E1FD               	bnz	clear_0
   162                           
   163                           ; Clear objects allocated to COMRAM (2 bytes)
   164  0013D2  6A5F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   165  0013D4  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   166  0013D6                     end_of_initialization:
   167                           	callstack 0
   168  0013D6                     __end_of__initialization:
   169                           	callstack 0
   170  0013D6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   171  0013D8  6EF8               	movwf	tblptru,c
   172  0013DA  0E08               	movlw	high __Lsmallconst
   173  0013DC  6EF7               	movwf	tblptrh,c
   174  0013DE  0100               	movlb	0
   175  0013E0  EF5F  F006         	goto	_main	;jump to C main() function
   176                           
   177                           	psect	bssCOMRAM
   178  00005E                     __pbssCOMRAM:
   179                           	callstack 0
   180  00005E                     _flags:
   181                           	callstack 0
   182  00005E                     	ds	2
   183                           
   184                           	psect	bssBANK0
   185  000060                     __pbssBANK0:
   186                           	callstack 0
   187  000060                     _nout:
   188                           	callstack 0
   189  000060                     	ds	2
   190  000062                     _width:
   191                           	callstack 0
   192  000062                     	ds	2
   193  000064                     _prec:
   194                           	callstack 0
   195  000064                     	ds	2
   196  000066                     _dbuf:
   197                           	callstack 0
   198  000066                     	ds	32
   199  000086                     _buffer:
   200                           	callstack 0
   201  000086                     	ds	20
   202                           
   203                           	psect	cstackBANK0
   204  00009A                     __pcstackBANK0:
   205                           	callstack 0
   206  00009A                     sprintf@ap:
   207                           	callstack 0
   208                           
   209                           ; 2 bytes @ 0x0
   210  00009A                     	ds	2
   211  00009C                     sprintf@f:
   212                           	callstack 0
   213                           
   214                           ; 6 bytes @ 0x2
   215  00009C                     	ds	6
   216  0000A2                     main@valor_ch0:
   217                           	callstack 0
   218                           
   219                           ; 2 bytes @ 0x8
   220  0000A2                     	ds	2
   221  0000A4                     main@valor_ch1:
   222                           	callstack 0
   223                           
   224                           ; 2 bytes @ 0xA
   225  0000A4                     	ds	2
   226  0000A6                     main@valor_ch2:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0xC
   230  0000A6                     	ds	2
   231                           
   232                           	psect	cstackCOMRAM
   233  000001                     __pcstackCOMRAM:
   234                           	callstack 0
   235  000001                     ?_ADC_Read:
   236                           	callstack 0
   237  000001                     ?_strlen:
   238                           	callstack 0
   239  000001                     ?___lodiv:
   240                           	callstack 0
   241  000001                     ?___lomod:
   242                           	callstack 0
   243  000001                     ADC_Init@p_ang:
   244                           	callstack 0
   245  000001                     Lcd_Port@a:
   246                           	callstack 0
   247  000001                     fputc@c:
   248                           	callstack 0
   249  000001                     strlen@s:
   250                           	callstack 0
   251  000001                     ___lodiv@dividend:
   252                           	callstack 0
   253  000001                     ___lomod@dividend:
   254                           	callstack 0
   255                           
   256                           ; 8 bytes @ 0x0
   257  000001                     	ds	1
   258  000002                     ??_Lcd_Cmd:
   259  000002                     Lcd_Write_Char@temp:
   260                           	callstack 0
   261                           
   262                           ; 1 bytes @ 0x1
   263  000002                     	ds	1
   264  000003                     ADC_Read@ch:
   265                           	callstack 0
   266  000003                     Lcd_Cmd@a:
   267                           	callstack 0
   268  000003                     Lcd_Write_Char@y:
   269                           	callstack 0
   270  000003                     fputc@fp:
   271                           	callstack 0
   272  000003                     strlen@a:
   273                           	callstack 0
   274                           
   275                           ; 2 bytes @ 0x2
   276  000003                     	ds	1
   277  000004                     ??_Lcd_Init:
   278  000004                     Lcd_Set_Cursor@b:
   279                           	callstack 0
   280  000004                     Lcd_Write_Char@a:
   281                           	callstack 0
   282                           
   283                           ; 1 bytes @ 0x3
   284  000004                     	ds	1
   285  000005                     ??_fputc:
   286  000005                     Lcd_Set_Cursor@a:
   287                           	callstack 0
   288  000005                     Lcd_Write_String@a:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0x4
   292  000005                     	ds	1
   293  000006                     Lcd_Set_Cursor@z:
   294                           	callstack 0
   295                           
   296                           ; 1 bytes @ 0x5
   297  000006                     	ds	1
   298  000007                     Lcd_Set_Cursor@y:
   299                           	callstack 0
   300  000007                     Lcd_Write_String@i:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0x6
   304  000007                     	ds	1
   305  000008                     Lcd_Set_Cursor@temp:
   306                           	callstack 0
   307                           
   308                           ; 1 bytes @ 0x7
   309  000008                     	ds	1
   310  000009                     ___lodiv@divisor:
   311                           	callstack 0
   312  000009                     ___lomod@divisor:
   313                           	callstack 0
   314                           
   315                           ; 8 bytes @ 0x8
   316  000009                     	ds	1
   317  00000A                     fputs@s:
   318                           	callstack 0
   319                           
   320                           ; 2 bytes @ 0x9
   321  00000A                     	ds	2
   322  00000C                     fputs@fp:
   323                           	callstack 0
   324                           
   325                           ; 2 bytes @ 0xB
   326  00000C                     	ds	2
   327  00000E                     fputs@c:
   328                           	callstack 0
   329                           
   330                           ; 1 bytes @ 0xD
   331  00000E                     	ds	1
   332  00000F                     fputs@i:
   333                           	callstack 0
   334                           
   335                           ; 2 bytes @ 0xE
   336  00000F                     	ds	2
   337  000011                     ?_pad:
   338                           	callstack 0
   339  000011                     ___lomod@counter:
   340                           	callstack 0
   341  000011                     pad@fp:
   342                           	callstack 0
   343  000011                     ___lodiv@quotient:
   344                           	callstack 0
   345                           
   346                           ; 8 bytes @ 0x10
   347  000011                     	ds	2
   348  000013                     pad@buf:
   349                           	callstack 0
   350                           
   351                           ; 2 bytes @ 0x12
   352  000013                     	ds	2
   353  000015                     pad@p:
   354                           	callstack 0
   355                           
   356                           ; 2 bytes @ 0x14
   357  000015                     	ds	2
   358  000017                     ??_pad:
   359                           
   360                           ; 1 bytes @ 0x16
   361  000017                     	ds	1
   362  000018                     pad@i:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x17
   366  000018                     	ds	1
   367  000019                     ___lodiv@counter:
   368                           	callstack 0
   369                           
   370                           ; 1 bytes @ 0x18
   371  000019                     	ds	1
   372  00001A                     pad@w:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0x19
   376  00001A                     	ds	2
   377  00001C                     ?_utoa:
   378                           	callstack 0
   379  00001C                     utoa@fp:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x1B
   383  00001C                     	ds	2
   384  00001E                     utoa@d:
   385                           	callstack 0
   386                           
   387                           ; 8 bytes @ 0x1D
   388  00001E                     	ds	8
   389  000026                     ??_utoa:
   390                           
   391                           ; 1 bytes @ 0x25
   392  000026                     	ds	8
   393  00002E                     utoa@p:
   394                           	callstack 0
   395                           
   396                           ; 2 bytes @ 0x2D
   397  00002E                     	ds	2
   398  000030                     utoa@w:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x2F
   402  000030                     	ds	2
   403  000032                     utoa@n:
   404                           	callstack 0
   405                           
   406                           ; 8 bytes @ 0x31
   407  000032                     	ds	8
   408  00003A                     utoa@i:
   409                           	callstack 0
   410                           
   411                           ; 2 bytes @ 0x39
   412  00003A                     	ds	2
   413  00003C                     ?_vfpfcnvrt:
   414                           	callstack 0
   415  00003C                     vfpfcnvrt@fp:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x3B
   419  00003C                     	ds	2
   420  00003E                     vfpfcnvrt@fmt:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x3D
   424  00003E                     	ds	2
   425  000040                     vfpfcnvrt@ap:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x3F
   429  000040                     	ds	2
   430  000042                     ??_vfpfcnvrt:
   431                           
   432                           ; 1 bytes @ 0x41
   433  000042                     	ds	4
   434  000046                     vfpfcnvrt@llu:
   435                           	callstack 0
   436                           
   437                           ; 8 bytes @ 0x45
   438  000046                     	ds	8
   439  00004E                     ?_vfprintf:
   440                           	callstack 0
   441  00004E                     vfprintf@fp:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x4D
   445  00004E                     	ds	2
   446  000050                     vfprintf@fmt:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0x4F
   450  000050                     	ds	2
   451  000052                     vfprintf@ap:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x51
   455  000052                     	ds	2
   456  000054                     vfprintf@cfmt:
   457                           	callstack 0
   458                           
   459                           ; 2 bytes @ 0x53
   460  000054                     	ds	2
   461  000056                     ?_sprintf:
   462                           	callstack 0
   463  000056                     sprintf@s:
   464                           	callstack 0
   465                           
   466                           ; 2 bytes @ 0x55
   467  000056                     	ds	2
   468  000058                     sprintf@fmt:
   469                           	callstack 0
   470                           
   471                           ; 2 bytes @ 0x57
   472  000058                     	ds	4
   473  00005C                     ??_main:
   474                           
   475                           ; 1 bytes @ 0x5B
   476  00005C                     	ds	2
   477                           
   478 ;;
   479 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   480 ;;
   481 ;; *************** function _main *****************
   482 ;; Defined at:
   483 ;;		line 24 in file "ADC_Multichannel.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;  valor_ch2       2   12[BANK0 ] int 
   488 ;;  valor_ch1       2   10[BANK0 ] int 
   489 ;;  valor_ch0       2    8[BANK0 ] int 
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   499 ;;      Params:         0       0       0       0       0       0       0       0       0
   500 ;;      Locals:         0       6       0       0       0       0       0       0       0
   501 ;;      Temps:          2       0       0       0       0       0       0       0       0
   502 ;;      Totals:         2       6       0       0       0       0       0       0       0
   503 ;;Total ram usage:        8 bytes
   504 ;; Hardware stack levels required when called: 8
   505 ;; This function calls:
   506 ;;		_ADC_Init
   507 ;;		_ADC_Read
   508 ;;		_Lcd_Init
   509 ;;		_Lcd_Set_Cursor
   510 ;;		_Lcd_Write_String
   511 ;;		_sprintf
   512 ;; This function is called by:
   513 ;;		Startup code after reset
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           	psect	text0
   518  000CBE                     __ptext0:
   519                           	callstack 0
   520  000CBE                     _main:
   521                           	callstack 23
   522  000CBE                     
   523                           ;ADC_Multichannel.c: 26:     ADC_Init(0x0C);
   524  000CBE  0E0C               	movlw	12
   525  000CC0  ECF2  F009         	call	_ADC_Init
   526                           
   527                           ;ADC_Multichannel.c: 27:     Lcd_Init();
   528  000CC4  EC6B  F008         	call	_Lcd_Init	;wreg free
   529  000CC8                     l1577:
   530                           
   531                           ;ADC_Multichannel.c: 30:     {;ADC_Multichannel.c: 31:         int valor_ch0 = ADC_Read(
      +                          0);
   532  000CC8  0E00               	movlw	0
   533  000CCA  EC39  F009         	call	_ADC_Read
   534  000CCE  C001  F0A2         	movff	?_ADC_Read,main@valor_ch0
   535  000CD2  C002  F0A3         	movff	?_ADC_Read+1,main@valor_ch0+1
   536  000CD6                     
   537                           ;ADC_Multichannel.c: 32:         int valor_ch1 = ADC_Read(1);
   538  000CD6  0E01               	movlw	1
   539  000CD8  EC39  F009         	call	_ADC_Read
   540  000CDC  C001  F0A4         	movff	?_ADC_Read,main@valor_ch1
   541  000CE0  C002  F0A5         	movff	?_ADC_Read+1,main@valor_ch1+1
   542  000CE4                     
   543                           ;ADC_Multichannel.c: 33:         int valor_ch2 = ADC_Read(2);
   544  000CE4  0E02               	movlw	2
   545  000CE6  EC39  F009         	call	_ADC_Read
   546  000CEA  C001  F0A6         	movff	?_ADC_Read,main@valor_ch2
   547  000CEE  C002  F0A7         	movff	?_ADC_Read+1,main@valor_ch2+1
   548  000CF2                     
   549                           ;ADC_Multichannel.c: 35:         Lcd_Set_Cursor(1,1);
   550  000CF2  0E01               	movlw	1
   551  000CF4  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   552  000CF6  0E01               	movlw	1
   553  000CF8  ECD4  F006         	call	_Lcd_Set_Cursor
   554  000CFC                     
   555                           ;ADC_Multichannel.c: 36:         sprintf(buffer, "ADC Canal 0: %u   ", valor_ch0);
   556  000CFC  0E86               	movlw	low _buffer
   557  000CFE  6E56               	movwf	sprintf@s^0,c
   558  000D00  0E00               	movlw	high _buffer
   559  000D02  6E57               	movwf	(sprintf@s+1)^0,c
   560  000D04  0E01               	movlw	low STR_1
   561  000D06  6E58               	movwf	sprintf@fmt^0,c
   562  000D08  0E08               	movlw	high STR_1
   563  000D0A  6E59               	movwf	(sprintf@fmt+1)^0,c
   564  000D0C  C0A2  F05A         	movff	main@valor_ch0,?_sprintf+4
   565  000D10  C0A3  F05B         	movff	main@valor_ch0+1,?_sprintf+5
   566  000D14  EC10  F009         	call	_sprintf	;wreg free
   567  000D18                     
   568                           ;ADC_Multichannel.c: 37:         Lcd_Write_String(buffer);
   569  000D18  0E86               	movlw	low _buffer
   570  000D1A  6E05               	movwf	Lcd_Write_String@a^0,c
   571  000D1C  0E00               	movlw	high _buffer
   572  000D1E  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
   573  000D20  EC7E  F009         	call	_Lcd_Write_String	;wreg free
   574  000D24                     
   575                           ;ADC_Multichannel.c: 39:         Lcd_Set_Cursor(2,1);
   576  000D24  0E01               	movlw	1
   577  000D26  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   578  000D28  0E02               	movlw	2
   579  000D2A  ECD4  F006         	call	_Lcd_Set_Cursor
   580  000D2E                     
   581                           ;ADC_Multichannel.c: 40:         sprintf(buffer, "ADC Canal 1: %u   ", valor_ch1);
   582  000D2E  0E86               	movlw	low _buffer
   583  000D30  6E56               	movwf	sprintf@s^0,c
   584  000D32  0E00               	movlw	high _buffer
   585  000D34  6E57               	movwf	(sprintf@s+1)^0,c
   586  000D36  0E14               	movlw	low STR_2
   587  000D38  6E58               	movwf	sprintf@fmt^0,c
   588  000D3A  0E08               	movlw	high STR_2
   589  000D3C  6E59               	movwf	(sprintf@fmt+1)^0,c
   590  000D3E  C0A4  F05A         	movff	main@valor_ch1,?_sprintf+4
   591  000D42  C0A5  F05B         	movff	main@valor_ch1+1,?_sprintf+5
   592  000D46  EC10  F009         	call	_sprintf	;wreg free
   593  000D4A                     
   594                           ;ADC_Multichannel.c: 41:         Lcd_Write_String(buffer);
   595  000D4A  0E86               	movlw	low _buffer
   596  000D4C  6E05               	movwf	Lcd_Write_String@a^0,c
   597  000D4E  0E00               	movlw	high _buffer
   598  000D50  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
   599  000D52  EC7E  F009         	call	_Lcd_Write_String	;wreg free
   600  000D56                     
   601                           ;ADC_Multichannel.c: 43:         Lcd_Set_Cursor(3,1);
   602  000D56  0E01               	movlw	1
   603  000D58  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   604  000D5A  0E03               	movlw	3
   605  000D5C  ECD4  F006         	call	_Lcd_Set_Cursor
   606  000D60                     
   607                           ;ADC_Multichannel.c: 44:         sprintf(buffer, "ADC Canal 2: %u   ", valor_ch2);
   608  000D60  0E86               	movlw	low _buffer
   609  000D62  6E56               	movwf	sprintf@s^0,c
   610  000D64  0E00               	movlw	high _buffer
   611  000D66  6E57               	movwf	(sprintf@s+1)^0,c
   612  000D68  0E27               	movlw	low STR_3
   613  000D6A  6E58               	movwf	sprintf@fmt^0,c
   614  000D6C  0E08               	movlw	high STR_3
   615  000D6E  6E59               	movwf	(sprintf@fmt+1)^0,c
   616  000D70  C0A6  F05A         	movff	main@valor_ch2,?_sprintf+4
   617  000D74  C0A7  F05B         	movff	main@valor_ch2+1,?_sprintf+5
   618  000D78  EC10  F009         	call	_sprintf	;wreg free
   619  000D7C                     
   620                           ;ADC_Multichannel.c: 45:         Lcd_Write_String(buffer);
   621  000D7C  0E86               	movlw	low _buffer
   622  000D7E  6E05               	movwf	Lcd_Write_String@a^0,c
   623  000D80  0E00               	movlw	high _buffer
   624  000D82  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
   625  000D84  EC7E  F009         	call	_Lcd_Write_String	;wreg free
   626  000D88                     
   627                           ;ADC_Multichannel.c: 46:         _delay((unsigned long)((150)*(48000000/4000.0)));
   628  000D88  0E0A               	movlw	10
   629  000D8A  6E5D               	movwf	(??_main+1)^0,c
   630  000D8C  0E22               	movlw	34
   631  000D8E  6E5C               	movwf	??_main^0,c
   632  000D90  0EA1               	movlw	161
   633  000D92                     u797:
   634  000D92  2EE8               	decfsz	wreg,f,c
   635  000D94  D7FE               	bra	u797
   636  000D96  2E5C               	decfsz	??_main^0,f,c
   637  000D98  D7FC               	bra	u797
   638  000D9A  2E5D               	decfsz	(??_main+1)^0,f,c
   639  000D9C  D7FA               	bra	u797
   640  000D9E  F000               	nop	
   641  000DA0  EF64  F006         	goto	l1577
   642  000DA4  EF00  F000         	goto	start
   643  000DA8                     __end_of_main:
   644                           	callstack 0
   645                           
   646 ;; *************** function _sprintf *****************
   647 ;; Defined at:
   648 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;  s               2   85[COMRAM] PTR unsigned char 
   651 ;;		 -> buffer(20), 
   652 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   653 ;;		 -> STR_3(19), STR_2(19), STR_1(19), 
   654 ;; Auto vars:     Size  Location     Type
   655 ;;  f               6    2[BANK0 ] struct _IO_FILE
   656 ;;  ap              2    0[BANK0 ] PTR void [1]
   657 ;;		 -> ?_sprintf(2), 
   658 ;;  ret             2    0        int 
   659 ;; Return value:  Size  Location     Type
   660 ;;                  2   85[COMRAM] int 
   661 ;; Registers used:
   662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   668 ;;      Params:         6       0       0       0       0       0       0       0       0
   669 ;;      Locals:         0       8       0       0       0       0       0       0       0
   670 ;;      Temps:          0       0       0       0       0       0       0       0       0
   671 ;;      Totals:         6       8       0       0       0       0       0       0       0
   672 ;;Total ram usage:       14 bytes
   673 ;; Hardware stack levels used: 1
   674 ;; Hardware stack levels required when called: 7
   675 ;; This function calls:
   676 ;;		_vfprintf
   677 ;; This function is called by:
   678 ;;		_main
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text1
   683  001220                     __ptext1:
   684                           	callstack 0
   685  001220                     _sprintf:
   686                           	callstack 23
   687  001220  0E5A               	movlw	low (?_sprintf+4)
   688  001222  0100               	movlb	0	; () banked
   689  001224  6F9A               	movwf	sprintf@ap& (0+255),b
   690  001226  0E00               	movlw	high (?_sprintf+4)
   691  001228  6F9B               	movwf	(sprintf@ap+1)& (0+255),b
   692  00122A  C056  F09C         	movff	sprintf@s,sprintf@f
   693  00122E  C057  F09D         	movff	sprintf@s+1,sprintf@f+1
   694  001232                     
   695                           ; BSR set to: 0
   696  001232  0E00               	movlw	0
   697  001234  6F9F               	movwf	(sprintf@f+3)& (0+255),b
   698  001236  0E00               	movlw	0
   699  001238  6F9E               	movwf	(sprintf@f+2)& (0+255),b
   700  00123A                     
   701                           ; BSR set to: 0
   702  00123A  0E00               	movlw	0
   703  00123C  6FA1               	movwf	(sprintf@f+5)& (0+255),b
   704  00123E  0E00               	movlw	0
   705  001240  6FA0               	movwf	(sprintf@f+4)& (0+255),b
   706  001242                     
   707                           ; BSR set to: 0
   708  001242  0E9C               	movlw	low sprintf@f
   709  001244  6E4E               	movwf	vfprintf@fp^0,c
   710  001246  0E00               	movlw	high sprintf@f
   711  001248  6E4F               	movwf	(vfprintf@fp+1)^0,c
   712  00124A  C058  F050         	movff	sprintf@fmt,vfprintf@fmt
   713  00124E  C059  F051         	movff	sprintf@fmt+1,vfprintf@fmt+1
   714  001252  0E9A               	movlw	low sprintf@ap
   715  001254  6E52               	movwf	vfprintf@ap^0,c
   716  001256  0E00               	movlw	high sprintf@ap
   717  001258  6E53               	movwf	(vfprintf@ap+1)^0,c
   718  00125A  ECB1  F008         	call	_vfprintf	;wreg free
   719  00125E  0100               	movlb	0	; () banked
   720  001260  519E               	movf	(sprintf@f+2)& (0+255),w,b
   721  001262  2456               	addwf	sprintf@s^0,w,c
   722  001264  6ED9               	movwf	fsr2l,c
   723  001266  519F               	movf	(sprintf@f+3)& (0+255),w,b
   724  001268  2057               	addwfc	(sprintf@s+1)^0,w,c
   725  00126A  6EDA               	movwf	fsr2h,c
   726  00126C  0E00               	movlw	0
   727  00126E  6EDF               	movwf	indf2,c
   728  001270                     
   729                           ; BSR set to: 0
   730  001270  0012               	return		;funcret
   731  001272                     __end_of_sprintf:
   732                           	callstack 0
   733                           
   734 ;; *************** function _vfprintf *****************
   735 ;; Defined at:
   736 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;  fp              2   77[COMRAM] PTR struct _IO_FILE
   739 ;;		 -> sprintf@f(6), 
   740 ;;  fmt             2   79[COMRAM] PTR const unsigned char 
   741 ;;		 -> STR_3(19), STR_2(19), STR_1(19), 
   742 ;;  ap              2   81[COMRAM] PTR PTR void 
   743 ;;		 -> sprintf@ap(2), 
   744 ;; Auto vars:     Size  Location     Type
   745 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
   746 ;;		 -> STR_3(19), STR_2(19), STR_1(19), 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  2   77[COMRAM] int 
   749 ;; Registers used:
   750 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   756 ;;      Params:         6       0       0       0       0       0       0       0       0
   757 ;;      Locals:         2       0       0       0       0       0       0       0       0
   758 ;;      Temps:          0       0       0       0       0       0       0       0       0
   759 ;;      Totals:         8       0       0       0       0       0       0       0       0
   760 ;;Total ram usage:        8 bytes
   761 ;; Hardware stack levels used: 1
   762 ;; Hardware stack levels required when called: 6
   763 ;; This function calls:
   764 ;;		_vfpfcnvrt
   765 ;; This function is called by:
   766 ;;		_sprintf
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text2
   771  001162                     __ptext2:
   772                           	callstack 0
   773  001162                     _vfprintf:
   774                           	callstack 23
   775  001162                     
   776                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   777  001162  C050  F054         	movff	vfprintf@fmt,vfprintf@cfmt
   778  001166  C051  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   779  00116A                     
   780                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   781  00116A  0E00               	movlw	0
   782  00116C  0100               	movlb	0	; () banked
   783  00116E  6F61               	movwf	(_nout+1)& (0+255),b
   784  001170  0E00               	movlw	0
   785  001172  6F60               	movwf	_nout& (0+255),b
   786                           
   787                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   788  001174  EFCF  F008         	goto	l1467
   789  001178                     l1465:
   790                           
   791                           ; BSR set to: 0
   792                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   793  001178  C04E  F03C         	movff	vfprintf@fp,vfpfcnvrt@fp
   794  00117C  C04F  F03D         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   795  001180  0E54               	movlw	low vfprintf@cfmt
   796  001182  6E3E               	movwf	vfpfcnvrt@fmt^0,c
   797  001184  0E00               	movlw	high vfprintf@cfmt
   798  001186  6E3F               	movwf	(vfpfcnvrt@fmt+1)^0,c
   799  001188  C052  F040         	movff	vfprintf@ap,vfpfcnvrt@ap
   800  00118C  C053  F041         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   801  001190  EC1E  F005         	call	_vfpfcnvrt	;wreg free
   802  001194  503C               	movf	?_vfpfcnvrt^0,w,c
   803  001196  0100               	movlb	0	; () banked
   804  001198  2760               	addwf	_nout& (0+255),f,b
   805  00119A  503D               	movf	(?_vfpfcnvrt+1)^0,w,c
   806  00119C  2361               	addwfc	(_nout+1)& (0+255),f,b
   807  00119E                     l1467:
   808                           
   809                           ; BSR set to: 0
   810                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   811  00119E  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
   812  0011A2  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   813  0011A6                     	if	0	;tblptru may be non-zero
   814  0011A6                     	endif
   815  0011A6                     	if	0	;tblptru may be non-zero
   816  0011A6                     	endif
   817  0011A6  0008               	tblrd		*
   818  0011A8  50F5               	movf	tablat,w,c
   819  0011AA  0900               	iorlw	0
   820  0011AC  A4D8               	btfss	status,2,c
   821  0011AE  EFDB  F008         	goto	u711
   822  0011B2  EFDD  F008         	goto	u710
   823  0011B6                     u711:
   824  0011B6  EFBC  F008         	goto	l1465
   825  0011BA                     u710:
   826  0011BA                     
   827                           ; BSR set to: 0
   828                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   829  0011BA  C060  F04E         	movff	_nout,?_vfprintf
   830  0011BE  C061  F04F         	movff	_nout+1,?_vfprintf+1
   831  0011C2                     
   832                           ; BSR set to: 0
   833  0011C2  0012               	return		;funcret
   834  0011C4                     __end_of_vfprintf:
   835                           	callstack 0
   836                           
   837 ;; *************** function _vfpfcnvrt *****************
   838 ;; Defined at:
   839 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;  fp              2   59[COMRAM] PTR struct _IO_FILE
   842 ;;		 -> sprintf@f(6), 
   843 ;;  fmt             2   61[COMRAM] PTR PTR unsigned char 
   844 ;;		 -> vfprintf@cfmt(2), 
   845 ;;  ap              2   63[COMRAM] PTR PTR void 
   846 ;;		 -> sprintf@ap(2), 
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  llu             8   69[COMRAM] unsigned long long 
   849 ;;  ll              8    0        long long 
   850 ;;  f               4    0        long long 
   851 ;;  vp              3    0        PTR void 
   852 ;;  ct              3    0        unsigned char [3]
   853 ;;  cp              3    0        PTR unsigned char 
   854 ;;  i               2    0        int 
   855 ;;  done            2    0        int 
   856 ;;  c               1    0        unsigned char 
   857 ;; Return value:  Size  Location     Type
   858 ;;                  2   59[COMRAM] int 
   859 ;; Registers used:
   860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   866 ;;      Params:         6       0       0       0       0       0       0       0       0
   867 ;;      Locals:         8       0       0       0       0       0       0       0       0
   868 ;;      Temps:          4       0       0       0       0       0       0       0       0
   869 ;;      Totals:        18       0       0       0       0       0       0       0       0
   870 ;;Total ram usage:       18 bytes
   871 ;; Hardware stack levels used: 1
   872 ;; Hardware stack levels required when called: 5
   873 ;; This function calls:
   874 ;;		_fputc
   875 ;;		_utoa
   876 ;; This function is called by:
   877 ;;		_vfprintf
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           	psect	text3
   882  000A3C                     __ptext3:
   883                           	callstack 0
   884  000A3C                     _vfpfcnvrt:
   885                           	callstack 23
   886  000A3C                     
   887                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   888  000A3C  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   889  000A40  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   890  000A44  CFDE FFF6          	movff	postinc2,tblptrl
   891  000A48  CFDD FFF7          	movff	postdec2,tblptrh
   892  000A4C                     	if	0	;tblptru may be non-zero
   893  000A4C                     	endif
   894  000A4C                     	if	0	;tblptru may be non-zero
   895  000A4C                     	endif
   896  000A4C  0008               	tblrd		*
   897  000A4E  50F5               	movf	tablat,w,c
   898  000A50  0A25               	xorlw	37
   899  000A52  A4D8               	btfss	status,2,c
   900  000A54  EF2E  F005         	goto	u681
   901  000A58  EF30  F005         	goto	u680
   902  000A5C                     u681:
   903  000A5C  EFCB  F005         	goto	l1431
   904  000A60                     u680:
   905  000A60                     
   906                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   907  000A60  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   908  000A64  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   909  000A68  2ADE               	incf	postinc2,f,c
   910  000A6A  0E00               	movlw	0
   911  000A6C  22DD               	addwfc	postdec2,f,c
   912  000A6E                     
   913                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   914  000A6E  0E00               	movlw	0
   915  000A70  0100               	movlb	0	; () banked
   916  000A72  6F63               	movwf	(_width+1)& (0+255),b
   917  000A74  0E00               	movlw	0
   918  000A76  6F62               	movwf	_width& (0+255),b
   919  000A78  C062  F05E         	movff	_width,_flags
   920  000A7C  C063  F05F         	movff	_width+1,_flags+1
   921  000A80                     
   922                           ; BSR set to: 0
   923                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   924  000A80  6964               	setf	_prec& (0+255),b
   925  000A82  6965               	setf	(_prec+1)& (0+255),b
   926  000A84                     
   927                           ; BSR set to: 0
   928                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1204:         if 
      +                          (*fmt[0] == 'u') {
   929  000A84  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   930  000A88  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   931  000A8C  CFDE FFF6          	movff	postinc2,tblptrl
   932  000A90  CFDD FFF7          	movff	postdec2,tblptrh
   933  000A94                     	if	0	;tblptru may be non-zero
   934  000A94                     	endif
   935  000A94                     	if	0	;tblptru may be non-zero
   936  000A94                     	endif
   937  000A94  0008               	tblrd		*
   938  000A96  50F5               	movf	tablat,w,c
   939  000A98  0A75               	xorlw	117
   940  000A9A  A4D8               	btfss	status,2,c
   941  000A9C  EF52  F005         	goto	u691
   942  000AA0  EF54  F005         	goto	u690
   943  000AA4                     u691:
   944  000AA4  EF95  F005         	goto	l1415
   945  000AA8                     u690:
   946  000AA8                     
   947                           ; BSR set to: 0
   948                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1206:            
      +                           ++*fmt;
   949  000AA8  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   950  000AAC  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   951  000AB0  2ADE               	incf	postinc2,f,c
   952  000AB2  0E00               	movlw	0
   953  000AB4  22DD               	addwfc	postdec2,f,c
   954                           
   955                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1207:            
      +                           llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned in
      +                          t)0));
   956  000AB6  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   957  000ABA  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   958  000ABE  CFDF F042          	movff	indf2,??_vfpfcnvrt
   959  000AC2  0E02               	movlw	2
   960  000AC4  26DE               	addwf	postinc2,f,c
   961  000AC6  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
   962  000ACA  0E00               	movlw	0
   963  000ACC  22DD               	addwfc	postdec2,f,c
   964  000ACE  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
   965  000AD2  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   966  000AD6  CFDE F044          	movff	postinc2,??_vfpfcnvrt+2
   967  000ADA  CFDD F045          	movff	postdec2,??_vfpfcnvrt+3
   968  000ADE  C044  F046         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
   969  000AE2  C045  F047         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
   970  000AE6  6A48               	clrf	(vfpfcnvrt@llu+2)^0,c
   971  000AE8  6A49               	clrf	(vfpfcnvrt@llu+3)^0,c
   972  000AEA  6A4A               	clrf	(vfpfcnvrt@llu+4)^0,c
   973  000AEC  6A4B               	clrf	(vfpfcnvrt@llu+5)^0,c
   974  000AEE  6A4C               	clrf	(vfpfcnvrt@llu+6)^0,c
   975  000AF0  6A4D               	clrf	(vfpfcnvrt@llu+7)^0,c
   976  000AF2                     
   977                           ; BSR set to: 0
   978                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1209:            
      +                           return utoa(fp, llu);
   979  000AF2  C03C  F01C         	movff	vfpfcnvrt@fp,utoa@fp
   980  000AF6  C03D  F01D         	movff	vfpfcnvrt@fp+1,utoa@fp+1
   981  000AFA  C046  F01E         	movff	vfpfcnvrt@llu,utoa@d
   982  000AFE  C047  F01F         	movff	vfpfcnvrt@llu+1,utoa@d+1
   983  000B02  C048  F020         	movff	vfpfcnvrt@llu+2,utoa@d+2
   984  000B06  C049  F021         	movff	vfpfcnvrt@llu+3,utoa@d+3
   985  000B0A  C04A  F022         	movff	vfpfcnvrt@llu+4,utoa@d+4
   986  000B0E  C04B  F023         	movff	vfpfcnvrt@llu+5,utoa@d+5
   987  000B12  C04C  F024         	movff	vfpfcnvrt@llu+6,utoa@d+6
   988  000B16  C04D  F025         	movff	vfpfcnvrt@llu+7,utoa@d+7
   989  000B1A  EC1E  F004         	call	_utoa	;wreg free
   990  000B1E  C01C  F03C         	movff	?_utoa,?_vfpfcnvrt
   991  000B22  C01D  F03D         	movff	?_utoa+1,?_vfpfcnvrt+1
   992  000B26  EFE6  F005         	goto	l841
   993  000B2A                     l1415:
   994                           
   995                           ; BSR set to: 0
   996                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
   997  000B2A  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   998  000B2E  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   999  000B32  CFDE FFF6          	movff	postinc2,tblptrl
  1000  000B36  CFDD FFF7          	movff	postdec2,tblptrh
  1001  000B3A                     	if	0	;tblptru may be non-zero
  1002  000B3A                     	endif
  1003  000B3A                     	if	0	;tblptru may be non-zero
  1004  000B3A                     	endif
  1005  000B3A  0008               	tblrd		*
  1006  000B3C  50F5               	movf	tablat,w,c
  1007  000B3E  0A25               	xorlw	37
  1008  000B40  A4D8               	btfss	status,2,c
  1009  000B42  EFA5  F005         	goto	u701
  1010  000B46  EFA7  F005         	goto	u700
  1011  000B4A                     u701:
  1012  000B4A  EFBE  F005         	goto	l1425
  1013  000B4E                     u700:
  1014  000B4E                     
  1015                           ; BSR set to: 0
  1016                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1017  000B4E  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1018  000B52  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1019  000B56  2ADE               	incf	postinc2,f,c
  1020  000B58  0E00               	movlw	0
  1021  000B5A  22DD               	addwfc	postdec2,f,c
  1022  000B5C                     
  1023                           ; BSR set to: 0
  1024                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1025  000B5C  0E00               	movlw	0
  1026  000B5E  6E02               	movwf	(fputc@c+1)^0,c
  1027  000B60  0E25               	movlw	37
  1028  000B62  6E01               	movwf	fputc@c^0,c
  1029  000B64  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1030  000B68  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1031  000B6C  ECA5  F007         	call	_fputc	;wreg free
  1032  000B70                     l1421:
  1033                           
  1034                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1035  000B70  0E00               	movlw	0
  1036  000B72  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1037  000B74  0E01               	movlw	1
  1038  000B76  6E3C               	movwf	?_vfpfcnvrt^0,c
  1039  000B78  EFE6  F005         	goto	l841
  1040  000B7C                     l1425:
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1044  000B7C  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1045  000B80  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1046  000B84  2ADE               	incf	postinc2,f,c
  1047  000B86  0E00               	movlw	0
  1048  000B88  22DD               	addwfc	postdec2,f,c
  1049  000B8A                     
  1050                           ; BSR set to: 0
  1051                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1052  000B8A  0E00               	movlw	0
  1053  000B8C  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1054  000B8E  0E00               	movlw	0
  1055  000B90  6E3C               	movwf	?_vfpfcnvrt^0,c
  1056  000B92  EFE6  F005         	goto	l841
  1057  000B96                     l1431:
  1058                           
  1059                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1060  000B96  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1061  000B9A  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1062  000B9E  CFDE FFF6          	movff	postinc2,tblptrl
  1063  000BA2  CFDD FFF7          	movff	postdec2,tblptrh
  1064  000BA6                     	if	0	;tblptru may be non-zero
  1065  000BA6                     	endif
  1066  000BA6                     	if	0	;tblptru may be non-zero
  1067  000BA6                     	endif
  1068  000BA6  0008               	tblrd		*
  1069  000BA8  50F5               	movf	tablat,w,c
  1070  000BAA  6E01               	movwf	fputc@c^0,c
  1071  000BAC  6A02               	clrf	(fputc@c+1)^0,c
  1072  000BAE  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1073  000BB2  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1074  000BB6  ECA5  F007         	call	_fputc	;wreg free
  1075  000BBA                     
  1076                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1077  000BBA  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1078  000BBE  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1079  000BC2  2ADE               	incf	postinc2,f,c
  1080  000BC4  0E00               	movlw	0
  1081  000BC6  22DD               	addwfc	postdec2,f,c
  1082  000BC8  EFB8  F005         	goto	l1421
  1083  000BCC                     l841:
  1084  000BCC  0012               	return		;funcret
  1085  000BCE                     __end_of_vfpfcnvrt:
  1086                           	callstack 0
  1087                           
  1088 ;; *************** function _utoa *****************
  1089 ;; Defined at:
  1090 ;;		line 615 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1093 ;;		 -> sprintf@f(6), 
  1094 ;;  d               8   29[COMRAM] unsigned long long 
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;  n               8   49[COMRAM] unsigned long long 
  1097 ;;  i               2   57[COMRAM] int 
  1098 ;;  w               2   47[COMRAM] int 
  1099 ;;  p               2   45[COMRAM] int 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  2   27[COMRAM] int 
  1102 ;; Registers used:
  1103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1109 ;;      Params:        10       0       0       0       0       0       0       0       0
  1110 ;;      Locals:        14       0       0       0       0       0       0       0       0
  1111 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1112 ;;      Totals:        32       0       0       0       0       0       0       0       0
  1113 ;;Total ram usage:       32 bytes
  1114 ;; Hardware stack levels used: 1
  1115 ;; Hardware stack levels required when called: 4
  1116 ;; This function calls:
  1117 ;;		___lodiv
  1118 ;;		___lomod
  1119 ;;		_pad
  1120 ;; This function is called by:
  1121 ;;		_vfpfcnvrt
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           	psect	text4
  1126  00083C                     __ptext4:
  1127                           	callstack 0
  1128  00083C                     _utoa:
  1129                           	callstack 23
  1130  00083C                     
  1131                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 615: static int u
      +                          toa(FILE *fp, unsigned long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99
      +                          \common\doprnt.c: 616: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\dop
      +                          rnt.c: 617:     int i, p, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common
      +                          \doprnt.c: 618:     unsigned long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sourc
      +                          es\c99\common\doprnt.c: 621:     if (!(prec < 0)) {
  1132  00083C  0100               	movlb	0	; () banked
  1133  00083E  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1134  000840  EF24  F004         	goto	u611
  1135  000844  EF26  F004         	goto	u610
  1136  000848                     u611:
  1137  000848  EF27  F004         	goto	l1357
  1138  00084C                     u610:
  1139  00084C                     
  1140                           ; BSR set to: 0
  1141                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 622:         flag
      +                          s &= ~(1 << 1);
  1142  00084C  925E               	bcf	_flags^0,1,c
  1143  00084E                     l1357:
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 624:     p = (0 <
      +                           prec) ? prec : 1;
  1147  00084E  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1148  000850  EF34  F004         	goto	u620
  1149  000854  5165               	movf	(_prec+1)& (0+255),w,b
  1150  000856  E106               	bnz	u621
  1151  000858  0564               	decf	_prec& (0+255),w,b
  1152  00085A  B0D8               	btfsc	status,0,c
  1153  00085C  EF32  F004         	goto	u621
  1154  000860  EF34  F004         	goto	u620
  1155  000864                     u621:
  1156  000864  EF3A  F004         	goto	l826
  1157  000868                     u620:
  1158  000868                     
  1159                           ; BSR set to: 0
  1160  000868  0E00               	movlw	0
  1161  00086A  6E2F               	movwf	(utoa@p+1)^0,c
  1162  00086C  0E01               	movlw	1
  1163  00086E  6E2E               	movwf	utoa@p^0,c
  1164  000870  EF3E  F004         	goto	l828
  1165  000874                     l826:
  1166                           
  1167                           ; BSR set to: 0
  1168  000874  C064  F02E         	movff	_prec,utoa@p
  1169  000878  C065  F02F         	movff	_prec+1,utoa@p+1
  1170  00087C                     l828:
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 625:     w = widt
      +                          h;
  1174  00087C  C062  F030         	movff	_width,utoa@w
  1175  000880  C063  F031         	movff	_width+1,utoa@w+1
  1176                           
  1177                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 628:     n = d;
  1178  000884  C01E  F032         	movff	utoa@d,utoa@n
  1179  000888  C01F  F033         	movff	utoa@d+1,utoa@n+1
  1180  00088C  C020  F034         	movff	utoa@d+2,utoa@n+2
  1181  000890  C021  F035         	movff	utoa@d+3,utoa@n+3
  1182  000894  C022  F036         	movff	utoa@d+4,utoa@n+4
  1183  000898  C023  F037         	movff	utoa@d+5,utoa@n+5
  1184  00089C  C024  F038         	movff	utoa@d+6,utoa@n+6
  1185  0008A0  C025  F039         	movff	utoa@d+7,utoa@n+7
  1186  0008A4                     
  1187                           ; BSR set to: 0
  1188                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 629:     i = size
      +                          of(dbuf) - 1;
  1189  0008A4  0E00               	movlw	0
  1190  0008A6  6E3B               	movwf	(utoa@i+1)^0,c
  1191  0008A8  0E1F               	movlw	31
  1192  0008AA  6E3A               	movwf	utoa@i^0,c
  1193  0008AC                     
  1194                           ; BSR set to: 0
  1195                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 630:     dbuf[i] 
      +                          = '\0';
  1196  0008AC  0E00               	movlw	0
  1197  0008AE  6F85               	movwf	(_dbuf+31)& (0+255),b
  1198                           
  1199                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1200  0008B0  EFD0  F004         	goto	l1375
  1201  0008B4                     l1365:
  1202                           
  1203                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 632:         --i;
  1204  0008B4  063A               	decf	utoa@i^0,f,c
  1205  0008B6  A0D8               	btfss	status,0,c
  1206  0008B8  063B               	decf	(utoa@i+1)^0,f,c
  1207  0008BA                     
  1208                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 633:         dbuf
      +                          [i] = '0' + (n % 10);
  1209  0008BA  0E66               	movlw	low _dbuf
  1210  0008BC  243A               	addwf	utoa@i^0,w,c
  1211  0008BE  6ED9               	movwf	fsr2l,c
  1212  0008C0  0E00               	movlw	high _dbuf
  1213  0008C2  203B               	addwfc	(utoa@i+1)^0,w,c
  1214  0008C4  6EDA               	movwf	fsr2h,c
  1215  0008C6  C032  F001         	movff	utoa@n,___lomod@dividend
  1216  0008CA  C033  F002         	movff	utoa@n+1,___lomod@dividend+1
  1217  0008CE  C034  F003         	movff	utoa@n+2,___lomod@dividend+2
  1218  0008D2  C035  F004         	movff	utoa@n+3,___lomod@dividend+3
  1219  0008D6  C036  F005         	movff	utoa@n+4,___lomod@dividend+4
  1220  0008DA  C037  F006         	movff	utoa@n+5,___lomod@dividend+5
  1221  0008DE  C038  F007         	movff	utoa@n+6,___lomod@dividend+6
  1222  0008E2  C039  F008         	movff	utoa@n+7,___lomod@dividend+7
  1223  0008E6  0E0A               	movlw	10
  1224  0008E8  6E09               	movwf	___lomod@divisor^0,c
  1225  0008EA  0E00               	movlw	0
  1226  0008EC  6E0A               	movwf	(___lomod@divisor+1)^0,c
  1227  0008EE  0E00               	movlw	0
  1228  0008F0  6E0B               	movwf	(___lomod@divisor+2)^0,c
  1229  0008F2  0E00               	movlw	0
  1230  0008F4  6E0C               	movwf	(___lomod@divisor+3)^0,c
  1231  0008F6  0E00               	movlw	0
  1232  0008F8  6E0D               	movwf	(___lomod@divisor+4)^0,c
  1233  0008FA  0E00               	movlw	0
  1234  0008FC  6E0E               	movwf	(___lomod@divisor+5)^0,c
  1235  0008FE  0E00               	movlw	0
  1236  000900  6E0F               	movwf	(___lomod@divisor+6)^0,c
  1237  000902  0E00               	movlw	0
  1238  000904  6E10               	movwf	(___lomod@divisor+7)^0,c
  1239  000906  EC3D  F007         	call	___lomod	;wreg free
  1240  00090A  C001  F026         	movff	?___lomod,??_utoa
  1241  00090E  C002  F027         	movff	?___lomod+1,??_utoa+1
  1242  000912  C003  F028         	movff	?___lomod+2,??_utoa+2
  1243  000916  C004  F029         	movff	?___lomod+3,??_utoa+3
  1244  00091A  C005  F02A         	movff	?___lomod+4,??_utoa+4
  1245  00091E  C006  F02B         	movff	?___lomod+5,??_utoa+5
  1246  000922  C007  F02C         	movff	?___lomod+6,??_utoa+6
  1247  000926  C008  F02D         	movff	?___lomod+7,??_utoa+7
  1248  00092A  5026               	movf	??_utoa^0,w,c
  1249  00092C  0F30               	addlw	48
  1250  00092E  6EDF               	movwf	indf2,c
  1251  000930                     
  1252                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 634:         --p;
  1253  000930  062E               	decf	utoa@p^0,f,c
  1254  000932  A0D8               	btfss	status,0,c
  1255  000934  062F               	decf	(utoa@p+1)^0,f,c
  1256  000936                     
  1257                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 635:         --w;
  1258  000936  0630               	decf	utoa@w^0,f,c
  1259  000938  A0D8               	btfss	status,0,c
  1260  00093A  0631               	decf	(utoa@w+1)^0,f,c
  1261  00093C                     
  1262                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 636:         n = 
      +                          n / 10;
  1263  00093C  C032  F001         	movff	utoa@n,___lodiv@dividend
  1264  000940  C033  F002         	movff	utoa@n+1,___lodiv@dividend+1
  1265  000944  C034  F003         	movff	utoa@n+2,___lodiv@dividend+2
  1266  000948  C035  F004         	movff	utoa@n+3,___lodiv@dividend+3
  1267  00094C  C036  F005         	movff	utoa@n+4,___lodiv@dividend+4
  1268  000950  C037  F006         	movff	utoa@n+5,___lodiv@dividend+5
  1269  000954  C038  F007         	movff	utoa@n+6,___lodiv@dividend+6
  1270  000958  C039  F008         	movff	utoa@n+7,___lodiv@dividend+7
  1271  00095C  0E0A               	movlw	10
  1272  00095E  6E09               	movwf	___lodiv@divisor^0,c
  1273  000960  0E00               	movlw	0
  1274  000962  6E0A               	movwf	(___lodiv@divisor+1)^0,c
  1275  000964  0E00               	movlw	0
  1276  000966  6E0B               	movwf	(___lodiv@divisor+2)^0,c
  1277  000968  0E00               	movlw	0
  1278  00096A  6E0C               	movwf	(___lodiv@divisor+3)^0,c
  1279  00096C  0E00               	movlw	0
  1280  00096E  6E0D               	movwf	(___lodiv@divisor+4)^0,c
  1281  000970  0E00               	movlw	0
  1282  000972  6E0E               	movwf	(___lodiv@divisor+5)^0,c
  1283  000974  0E00               	movlw	0
  1284  000976  6E0F               	movwf	(___lodiv@divisor+6)^0,c
  1285  000978  0E00               	movlw	0
  1286  00097A  6E10               	movwf	(___lodiv@divisor+7)^0,c
  1287  00097C  ECE7  F005         	call	___lodiv	;wreg free
  1288  000980  C001  F032         	movff	?___lodiv,utoa@n
  1289  000984  C002  F033         	movff	?___lodiv+1,utoa@n+1
  1290  000988  C003  F034         	movff	?___lodiv+2,utoa@n+2
  1291  00098C  C004  F035         	movff	?___lodiv+3,utoa@n+3
  1292  000990  C005  F036         	movff	?___lodiv+4,utoa@n+4
  1293  000994  C006  F037         	movff	?___lodiv+5,utoa@n+5
  1294  000998  C007  F038         	movff	?___lodiv+6,utoa@n+6
  1295  00099C  C008  F039         	movff	?___lodiv+7,utoa@n+7
  1296  0009A0                     l1375:
  1297                           
  1298                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1299  0009A0  503A               	movf	utoa@i^0,w,c
  1300  0009A2  103B               	iorwf	(utoa@i+1)^0,w,c
  1301  0009A4  B4D8               	btfsc	status,2,c
  1302  0009A6  EFD7  F004         	goto	u631
  1303  0009AA  EFD9  F004         	goto	u630
  1304  0009AE                     u631:
  1305  0009AE  EF09  F005         	goto	l1385
  1306  0009B2                     u630:
  1307  0009B2  5032               	movf	utoa@n^0,w,c
  1308  0009B4  1033               	iorwf	(utoa@n+1)^0,w,c
  1309  0009B6  1034               	iorwf	(utoa@n+2)^0,w,c
  1310  0009B8  1035               	iorwf	(utoa@n+3)^0,w,c
  1311  0009BA  1036               	iorwf	(utoa@n+4)^0,w,c
  1312  0009BC  1037               	iorwf	(utoa@n+5)^0,w,c
  1313  0009BE  1038               	iorwf	(utoa@n+6)^0,w,c
  1314  0009C0  1039               	iorwf	(utoa@n+7)^0,w,c
  1315  0009C2  A4D8               	btfss	status,2,c
  1316  0009C4  EFE6  F004         	goto	u641
  1317  0009C8  EFE8  F004         	goto	u640
  1318  0009CC                     u641:
  1319  0009CC  EF5A  F004         	goto	l1365
  1320  0009D0                     u640:
  1321  0009D0  BE2F               	btfsc	(utoa@p+1)^0,7,c
  1322  0009D2  EFF5  F004         	goto	u650
  1323  0009D6  502F               	movf	(utoa@p+1)^0,w,c
  1324  0009D8  E106               	bnz	u651
  1325  0009DA  042E               	decf	utoa@p^0,w,c
  1326  0009DC  B0D8               	btfsc	status,0,c
  1327  0009DE  EFF3  F004         	goto	u651
  1328  0009E2  EFF5  F004         	goto	u650
  1329  0009E6                     u651:
  1330  0009E6  EF5A  F004         	goto	l1365
  1331  0009EA                     u650:
  1332  0009EA  BE31               	btfsc	(utoa@w+1)^0,7,c
  1333  0009EC  EF00  F005         	goto	u661
  1334  0009F0  5031               	movf	(utoa@w+1)^0,w,c
  1335  0009F2  E108               	bnz	u660
  1336  0009F4  0430               	decf	utoa@w^0,w,c
  1337  0009F6  A0D8               	btfss	status,0,c
  1338  0009F8  EF00  F005         	goto	u661
  1339  0009FC  EF02  F005         	goto	u660
  1340  000A00                     u661:
  1341  000A00  EF09  F005         	goto	l1385
  1342  000A04                     u660:
  1343  000A04  B25E               	btfsc	_flags^0,1,c
  1344  000A06  EF07  F005         	goto	u671
  1345  000A0A  EF09  F005         	goto	u670
  1346  000A0E                     u671:
  1347  000A0E  EF5A  F004         	goto	l1365
  1348  000A12                     u670:
  1349  000A12                     l1385:
  1350                           
  1351                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 640:     return p
      +                          ad(fp, &dbuf[i], w);
  1352  000A12  C01C  F011         	movff	utoa@fp,pad@fp
  1353  000A16  C01D  F012         	movff	utoa@fp+1,pad@fp+1
  1354  000A1A  0E66               	movlw	low _dbuf
  1355  000A1C  243A               	addwf	utoa@i^0,w,c
  1356  000A1E  6E13               	movwf	pad@buf^0,c
  1357  000A20  0E00               	movlw	high _dbuf
  1358  000A22  203B               	addwfc	(utoa@i+1)^0,w,c
  1359  000A24  6E14               	movwf	(pad@buf+1)^0,c
  1360  000A26  C030  F015         	movff	utoa@w,pad@p
  1361  000A2A  C031  F016         	movff	utoa@w+1,pad@p+1
  1362  000A2E  EC0A  F008         	call	_pad	;wreg free
  1363  000A32  C011  F01C         	movff	?_pad,?_utoa
  1364  000A36  C012  F01D         	movff	?_pad+1,?_utoa+1
  1365  000A3A  0012               	return		;funcret
  1366  000A3C                     __end_of_utoa:
  1367                           	callstack 0
  1368                           
  1369 ;; *************** function _pad *****************
  1370 ;; Defined at:
  1371 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1374 ;;		 -> sprintf@f(6), 
  1375 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1376 ;;		 -> dbuf(32), 
  1377 ;;  p               2   20[COMRAM] int 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;  w               2   25[COMRAM] int 
  1380 ;;  i               2   23[COMRAM] int 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  2   16[COMRAM] int 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1390 ;;      Params:         6       0       0       0       0       0       0       0       0
  1391 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1392 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1393 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1394 ;;Total ram usage:       11 bytes
  1395 ;; Hardware stack levels used: 1
  1396 ;; Hardware stack levels required when called: 3
  1397 ;; This function calls:
  1398 ;;		_fputc
  1399 ;;		_fputs
  1400 ;;		_strlen
  1401 ;; This function is called by:
  1402 ;;		_utoa
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text5
  1407  001014                     __ptext5:
  1408                           	callstack 0
  1409  001014                     _pad:
  1410                           	callstack 23
  1411  001014                     
  1412                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1413  001014  A05E               	btfss	_flags^0,0,c
  1414  001016  EF0F  F008         	goto	u531
  1415  00101A  EF11  F008         	goto	u530
  1416  00101E                     u531:
  1417  00101E  EF1B  F008         	goto	l1319
  1418  001022                     u530:
  1419  001022                     
  1420                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1421  001022  C013  F00A         	movff	pad@buf,fputs@s
  1422  001026  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1423  00102A  C011  F00C         	movff	pad@fp,fputs@fp
  1424  00102E  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1425  001032  EC5C  F009         	call	_fputs	;wreg free
  1426  001036                     l1319:
  1427                           
  1428                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1429  001036  BE16               	btfsc	(pad@p+1)^0,7,c
  1430  001038  EF20  F008         	goto	u541
  1431  00103C  EF22  F008         	goto	u540
  1432  001040                     u541:
  1433  001040  EF28  F008         	goto	l1323
  1434  001044                     u540:
  1435  001044  C015  F01A         	movff	pad@p,pad@w
  1436  001048  C016  F01B         	movff	pad@p+1,pad@w+1
  1437  00104C  EF2C  F008         	goto	l816
  1438  001050                     l1323:
  1439  001050  0E00               	movlw	0
  1440  001052  6E1B               	movwf	(pad@w+1)^0,c
  1441  001054  0E00               	movlw	0
  1442  001056  6E1A               	movwf	pad@w^0,c
  1443  001058                     l816:
  1444                           
  1445                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1446  001058  0E00               	movlw	0
  1447  00105A  6E19               	movwf	(pad@i+1)^0,c
  1448  00105C  0E00               	movlw	0
  1449  00105E  6E18               	movwf	pad@i^0,c
  1450                           
  1451                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1452  001060  EF3E  F008         	goto	l1329
  1453  001064                     l1325:
  1454                           
  1455                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1456  001064  0E00               	movlw	0
  1457  001066  6E02               	movwf	(fputc@c+1)^0,c
  1458  001068  0E20               	movlw	32
  1459  00106A  6E01               	movwf	fputc@c^0,c
  1460  00106C  C011  F003         	movff	pad@fp,fputc@fp
  1461  001070  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1462  001074  ECA5  F007         	call	_fputc	;wreg free
  1463  001078                     
  1464                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1465  001078  4A18               	infsnz	pad@i^0,f,c
  1466  00107A  2A19               	incf	(pad@i+1)^0,f,c
  1467  00107C                     l1329:
  1468                           
  1469                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1470  00107C  501A               	movf	pad@w^0,w,c
  1471  00107E  5C18               	subwf	pad@i^0,w,c
  1472  001080  5019               	movf	(pad@i+1)^0,w,c
  1473  001082  0A80               	xorlw	128
  1474  001084  6E17               	movwf	??_pad^0,c
  1475  001086  501B               	movf	(pad@w+1)^0,w,c
  1476  001088  0A80               	xorlw	128
  1477  00108A  5817               	subwfb	??_pad^0,w,c
  1478  00108C  A0D8               	btfss	status,0,c
  1479  00108E  EF4B  F008         	goto	u551
  1480  001092  EF4D  F008         	goto	u550
  1481  001096                     u551:
  1482  001096  EF32  F008         	goto	l1325
  1483  00109A                     u550:
  1484  00109A                     
  1485                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1486  00109A  B05E               	btfsc	_flags^0,0,c
  1487  00109C  EF52  F008         	goto	u561
  1488  0010A0  EF54  F008         	goto	u560
  1489  0010A4                     u561:
  1490  0010A4  EF5E  F008         	goto	l1333
  1491  0010A8                     u560:
  1492  0010A8                     
  1493                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1494  0010A8  C013  F00A         	movff	pad@buf,fputs@s
  1495  0010AC  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1496  0010B0  C011  F00C         	movff	pad@fp,fputs@fp
  1497  0010B4  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1498  0010B8  EC5C  F009         	call	_fputs	;wreg free
  1499  0010BC                     l1333:
  1500                           
  1501                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1502  0010BC  C013  F001         	movff	pad@buf,strlen@s
  1503  0010C0  C014  F002         	movff	pad@buf+1,strlen@s+1
  1504  0010C4  EC9E  F009         	call	_strlen	;wreg free
  1505  0010C8  501A               	movf	pad@w^0,w,c
  1506  0010CA  2401               	addwf	?_strlen^0,w,c
  1507  0010CC  6E11               	movwf	?_pad^0,c
  1508  0010CE  501B               	movf	(pad@w+1)^0,w,c
  1509  0010D0  2002               	addwfc	(?_strlen+1)^0,w,c
  1510  0010D2  6E12               	movwf	(?_pad+1)^0,c
  1511  0010D4  0012               	return		;funcret
  1512  0010D6                     __end_of_pad:
  1513                           	callstack 0
  1514                           
  1515 ;; *************** function _strlen *****************
  1516 ;; Defined at:
  1517 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1520 ;;		 -> dbuf(32), 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1523 ;;		 -> dbuf(32), 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  2    0[COMRAM] unsigned int 
  1526 ;; Registers used:
  1527 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1533 ;;      Params:         2       0       0       0       0       0       0       0       0
  1534 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1535 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1536 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1537 ;;Total ram usage:        4 bytes
  1538 ;; Hardware stack levels used: 1
  1539 ;; This function calls:
  1540 ;;		Nothing
  1541 ;; This function is called by:
  1542 ;;		_pad
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           	psect	text6
  1547  00133C                     __ptext6:
  1548                           	callstack 0
  1549  00133C                     _strlen:
  1550                           	callstack 25
  1551  00133C  C001  F003         	movff	strlen@s,strlen@a
  1552  001340  C002  F004         	movff	strlen@s+1,strlen@a+1
  1553  001344  EFA6  F009         	goto	l1271
  1554  001348                     l1269:
  1555  001348  4A01               	infsnz	strlen@s^0,f,c
  1556  00134A  2A02               	incf	(strlen@s+1)^0,f,c
  1557  00134C                     l1271:
  1558  00134C  C001  FFD9         	movff	strlen@s,fsr2l
  1559  001350  C002  FFDA         	movff	strlen@s+1,fsr2h
  1560  001354  50DF               	movf	indf2,w,c
  1561  001356  A4D8               	btfss	status,2,c
  1562  001358  EFB0  F009         	goto	u451
  1563  00135C  EFB2  F009         	goto	u450
  1564  001360                     u451:
  1565  001360  EFA4  F009         	goto	l1269
  1566  001364                     u450:
  1567  001364  5003               	movf	strlen@a^0,w,c
  1568  001366  5C01               	subwf	strlen@s^0,w,c
  1569  001368  6E01               	movwf	?_strlen^0,c
  1570  00136A  5004               	movf	(strlen@a+1)^0,w,c
  1571  00136C  5802               	subwfb	(strlen@s+1)^0,w,c
  1572  00136E  6E02               	movwf	(?_strlen+1)^0,c
  1573  001370  0012               	return		;funcret
  1574  001372                     __end_of_strlen:
  1575                           	callstack 0
  1576                           
  1577 ;; *************** function _fputs *****************
  1578 ;; Defined at:
  1579 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1582 ;;		 -> dbuf(32), 
  1583 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1584 ;;		 -> sprintf@f(6), 
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  i               2   14[COMRAM] int 
  1587 ;;  c               1   13[COMRAM] unsigned char 
  1588 ;; Return value:  Size  Location     Type
  1589 ;;                  2    9[COMRAM] int 
  1590 ;; Registers used:
  1591 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1597 ;;      Params:         4       0       0       0       0       0       0       0       0
  1598 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1599 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1600 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1601 ;;Total ram usage:        7 bytes
  1602 ;; Hardware stack levels used: 1
  1603 ;; Hardware stack levels required when called: 2
  1604 ;; This function calls:
  1605 ;;		_fputc
  1606 ;; This function is called by:
  1607 ;;		_pad
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text7
  1612  0012B8                     __ptext7:
  1613                           	callstack 0
  1614  0012B8                     _fputs:
  1615                           	callstack 23
  1616  0012B8  0E00               	movlw	0
  1617  0012BA  6E10               	movwf	(fputs@i+1)^0,c
  1618  0012BC  0E00               	movlw	0
  1619  0012BE  6E0F               	movwf	fputs@i^0,c
  1620  0012C0  EF6D  F009         	goto	l1265
  1621  0012C4                     l1261:
  1622  0012C4  C00E  F001         	movff	fputs@c,fputc@c
  1623  0012C8  6A02               	clrf	(fputc@c+1)^0,c
  1624  0012CA  C00C  F003         	movff	fputs@fp,fputc@fp
  1625  0012CE  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1626  0012D2  ECA5  F007         	call	_fputc	;wreg free
  1627  0012D6  4A0F               	infsnz	fputs@i^0,f,c
  1628  0012D8  2A10               	incf	(fputs@i+1)^0,f,c
  1629  0012DA                     l1265:
  1630  0012DA  500F               	movf	fputs@i^0,w,c
  1631  0012DC  240A               	addwf	fputs@s^0,w,c
  1632  0012DE  6ED9               	movwf	fsr2l,c
  1633  0012E0  5010               	movf	(fputs@i+1)^0,w,c
  1634  0012E2  200B               	addwfc	(fputs@s+1)^0,w,c
  1635  0012E4  6EDA               	movwf	fsr2h,c
  1636  0012E6  50DF               	movf	indf2,w,c
  1637  0012E8  6E0E               	movwf	fputs@c^0,c
  1638  0012EA  500E               	movf	fputs@c^0,w,c
  1639  0012EC  A4D8               	btfss	status,2,c
  1640  0012EE  EF7B  F009         	goto	u441
  1641  0012F2  EF7D  F009         	goto	u440
  1642  0012F6                     u441:
  1643  0012F6  EF62  F009         	goto	l1261
  1644  0012FA                     u440:
  1645  0012FA  0012               	return		;funcret
  1646  0012FC                     __end_of_fputs:
  1647                           	callstack 0
  1648                           
  1649 ;; *************** function _fputc *****************
  1650 ;; Defined at:
  1651 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  c               2    0[COMRAM] int 
  1654 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1655 ;;		 -> sprintf@f(6), 
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;		None
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  2    0[COMRAM] int 
  1660 ;; Registers used:
  1661 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1667 ;;      Params:         4       0       0       0       0       0       0       0       0
  1668 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1669 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1670 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1671 ;;Total ram usage:        9 bytes
  1672 ;; Hardware stack levels used: 1
  1673 ;; Hardware stack levels required when called: 1
  1674 ;; This function calls:
  1675 ;;		_putch
  1676 ;; This function is called by:
  1677 ;;		_pad
  1678 ;;		_vfpfcnvrt
  1679 ;;		_fputs
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text8
  1684  000F4A                     __ptext8:
  1685                           	callstack 0
  1686  000F4A                     _fputc:
  1687                           	callstack 23
  1688  000F4A  5003               	movf	fputc@fp^0,w,c
  1689  000F4C  1004               	iorwf	(fputc@fp+1)^0,w,c
  1690  000F4E  B4D8               	btfsc	status,2,c
  1691  000F50  EFAC  F007         	goto	u401
  1692  000F54  EFAE  F007         	goto	u400
  1693  000F58                     u401:
  1694  000F58  EFB7  F007         	goto	l1249
  1695  000F5C                     u400:
  1696  000F5C  5003               	movf	fputc@fp^0,w,c
  1697  000F5E  1004               	iorwf	(fputc@fp+1)^0,w,c
  1698  000F60  A4D8               	btfss	status,2,c
  1699  000F62  EFB5  F007         	goto	u411
  1700  000F66  EFB7  F007         	goto	u410
  1701  000F6A                     u411:
  1702  000F6A  EFBC  F007         	goto	l1251
  1703  000F6E                     u410:
  1704  000F6E                     l1249:
  1705  000F6E  5001               	movf	fputc@c^0,w,c
  1706  000F70  EC01  F00A         	call	_putch
  1707  000F74  EF09  F008         	goto	l860
  1708  000F78                     l1251:
  1709  000F78  EE20 F004          	lfsr	2,4
  1710  000F7C  5003               	movf	fputc@fp^0,w,c
  1711  000F7E  26D9               	addwf	fsr2l,f,c
  1712  000F80  5004               	movf	(fputc@fp+1)^0,w,c
  1713  000F82  22DA               	addwfc	fsr2h,f,c
  1714  000F84  50DE               	movf	postinc2,w,c
  1715  000F86  10DE               	iorwf	postinc2,w,c
  1716  000F88  B4D8               	btfsc	status,2,c
  1717  000F8A  EFC9  F007         	goto	u421
  1718  000F8E  EFCB  F007         	goto	u420
  1719  000F92                     u421:
  1720  000F92  EFE6  F007         	goto	l1255
  1721  000F96                     u420:
  1722  000F96  EE20 F004          	lfsr	2,4
  1723  000F9A  5003               	movf	fputc@fp^0,w,c
  1724  000F9C  26D9               	addwf	fsr2l,f,c
  1725  000F9E  5004               	movf	(fputc@fp+1)^0,w,c
  1726  000FA0  22DA               	addwfc	fsr2h,f,c
  1727  000FA2  EE10 F002          	lfsr	1,2
  1728  000FA6  5003               	movf	fputc@fp^0,w,c
  1729  000FA8  26E1               	addwf	fsr1l,f,c
  1730  000FAA  5004               	movf	(fputc@fp+1)^0,w,c
  1731  000FAC  22E2               	addwfc	fsr1h,f,c
  1732  000FAE  50DE               	movf	postinc2,w,c
  1733  000FB0  5CE6               	subwf	postinc1,w,c
  1734  000FB2  50E6               	movf	postinc1,w,c
  1735  000FB4  0A80               	xorlw	128
  1736  000FB6  6E09               	movwf	(??_fputc+4)^0,c
  1737  000FB8  50DE               	movf	postinc2,w,c
  1738  000FBA  0A80               	xorlw	128
  1739  000FBC  5809               	subwfb	(??_fputc+4)^0,w,c
  1740  000FBE  B0D8               	btfsc	status,0,c
  1741  000FC0  EFE4  F007         	goto	u431
  1742  000FC4  EFE6  F007         	goto	u430
  1743  000FC8                     u431:
  1744  000FC8  EF09  F008         	goto	l860
  1745  000FCC                     u430:
  1746  000FCC                     l1255:
  1747  000FCC  EE20 F002          	lfsr	2,2
  1748  000FD0  5003               	movf	fputc@fp^0,w,c
  1749  000FD2  26D9               	addwf	fsr2l,f,c
  1750  000FD4  5004               	movf	(fputc@fp+1)^0,w,c
  1751  000FD6  22DA               	addwfc	fsr2h,f,c
  1752  000FD8  CFDE F005          	movff	postinc2,??_fputc
  1753  000FDC  CFDD F006          	movff	postdec2,??_fputc+1
  1754  000FE0  C003  FFD9         	movff	fputc@fp,fsr2l
  1755  000FE4  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1756  000FE8  CFDE F007          	movff	postinc2,??_fputc+2
  1757  000FEC  CFDD F008          	movff	postdec2,??_fputc+3
  1758  000FF0  5005               	movf	??_fputc^0,w,c
  1759  000FF2  2407               	addwf	(??_fputc+2)^0,w,c
  1760  000FF4  6ED9               	movwf	fsr2l,c
  1761  000FF6  5006               	movf	(??_fputc+1)^0,w,c
  1762  000FF8  2008               	addwfc	(??_fputc+3)^0,w,c
  1763  000FFA  6EDA               	movwf	fsr2h,c
  1764  000FFC  C001  FFDF         	movff	fputc@c,indf2
  1765  001000  EE20 F002          	lfsr	2,2
  1766  001004  5003               	movf	fputc@fp^0,w,c
  1767  001006  26D9               	addwf	fsr2l,f,c
  1768  001008  5004               	movf	(fputc@fp+1)^0,w,c
  1769  00100A  22DA               	addwfc	fsr2h,f,c
  1770  00100C  2ADE               	incf	postinc2,f,c
  1771  00100E  0E00               	movlw	0
  1772  001010  22DD               	addwfc	postdec2,f,c
  1773  001012                     l860:
  1774  001012  0012               	return		;funcret
  1775  001014                     __end_of_fputc:
  1776                           	callstack 0
  1777                           
  1778 ;; *************** function _putch *****************
  1779 ;; Defined at:
  1780 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  c               1    wreg     unsigned char 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  c               1    0[COMRAM] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1794 ;;      Params:         0       0       0       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1797 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1798 ;;Total ram usage:        0 bytes
  1799 ;; Hardware stack levels used: 1
  1800 ;; This function calls:
  1801 ;;		Nothing
  1802 ;; This function is called by:
  1803 ;;		_fputc
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text9
  1808  001402                     __ptext9:
  1809                           	callstack 0
  1810  001402                     _putch:
  1811                           	callstack 23
  1812  001402  0012               	return		;funcret
  1813  001404                     __end_of_putch:
  1814                           	callstack 0
  1815                           
  1816 ;; *************** function ___lomod *****************
  1817 ;; Defined at:
  1818 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lomod.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;  dividend        8    0[COMRAM] unsigned long long 
  1821 ;;  divisor         8    8[COMRAM] unsigned long long 
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;  counter         1   16[COMRAM] unsigned char 
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  8    0[COMRAM] unsigned long long 
  1826 ;; Registers used:
  1827 ;;		wreg, status,2, status,0
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1833 ;;      Params:        16       0       0       0       0       0       0       0       0
  1834 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1835 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1836 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1837 ;;Total ram usage:       17 bytes
  1838 ;; Hardware stack levels used: 1
  1839 ;; This function calls:
  1840 ;;		Nothing
  1841 ;; This function is called by:
  1842 ;;		_utoa
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text10
  1847  000E7A                     __ptext10:
  1848                           	callstack 0
  1849  000E7A                     ___lomod:
  1850                           	callstack 26
  1851  000E7A  5009               	movf	___lomod@divisor^0,w,c
  1852  000E7C  100A               	iorwf	(___lomod@divisor+1)^0,w,c
  1853  000E7E  100B               	iorwf	(___lomod@divisor+2)^0,w,c
  1854  000E80  100C               	iorwf	(___lomod@divisor+3)^0,w,c
  1855  000E82  100D               	iorwf	(___lomod@divisor+4)^0,w,c
  1856  000E84  100E               	iorwf	(___lomod@divisor+5)^0,w,c
  1857  000E86  100F               	iorwf	(___lomod@divisor+6)^0,w,c
  1858  000E88  1010               	iorwf	(___lomod@divisor+7)^0,w,c
  1859  000E8A  B4D8               	btfsc	status,2,c
  1860  000E8C  EF4A  F007         	goto	u501
  1861  000E90  EF4C  F007         	goto	u500
  1862  000E94                     u501:
  1863  000E94  EF94  F007         	goto	l561
  1864  000E98                     u500:
  1865  000E98  0E01               	movlw	1
  1866  000E9A  6E11               	movwf	___lomod@counter^0,c
  1867  000E9C  EF5A  F007         	goto	l1305
  1868  000EA0                     l1303:
  1869  000EA0  90D8               	bcf	status,0,c
  1870  000EA2  3609               	rlcf	___lomod@divisor^0,f,c
  1871  000EA4  360A               	rlcf	(___lomod@divisor+1)^0,f,c
  1872  000EA6  360B               	rlcf	(___lomod@divisor+2)^0,f,c
  1873  000EA8  360C               	rlcf	(___lomod@divisor+3)^0,f,c
  1874  000EAA  360D               	rlcf	(___lomod@divisor+4)^0,f,c
  1875  000EAC  360E               	rlcf	(___lomod@divisor+5)^0,f,c
  1876  000EAE  360F               	rlcf	(___lomod@divisor+6)^0,f,c
  1877  000EB0  3610               	rlcf	(___lomod@divisor+7)^0,f,c
  1878  000EB2  2A11               	incf	___lomod@counter^0,f,c
  1879  000EB4                     l1305:
  1880  000EB4  AE10               	btfss	(___lomod@divisor+7)^0,7,c
  1881  000EB6  EF5F  F007         	goto	u511
  1882  000EBA  EF61  F007         	goto	u510
  1883  000EBE                     u511:
  1884  000EBE  EF50  F007         	goto	l1303
  1885  000EC2                     u510:
  1886  000EC2                     l1307:
  1887  000EC2  5009               	movf	___lomod@divisor^0,w,c
  1888  000EC4  5C01               	subwf	___lomod@dividend^0,w,c
  1889  000EC6  500A               	movf	(___lomod@divisor+1)^0,w,c
  1890  000EC8  5802               	subwfb	(___lomod@dividend+1)^0,w,c
  1891  000ECA  500B               	movf	(___lomod@divisor+2)^0,w,c
  1892  000ECC  5803               	subwfb	(___lomod@dividend+2)^0,w,c
  1893  000ECE  500C               	movf	(___lomod@divisor+3)^0,w,c
  1894  000ED0  5804               	subwfb	(___lomod@dividend+3)^0,w,c
  1895  000ED2  500D               	movf	(___lomod@divisor+4)^0,w,c
  1896  000ED4  5805               	subwfb	(___lomod@dividend+4)^0,w,c
  1897  000ED6  500E               	movf	(___lomod@divisor+5)^0,w,c
  1898  000ED8  5806               	subwfb	(___lomod@dividend+5)^0,w,c
  1899  000EDA  500F               	movf	(___lomod@divisor+6)^0,w,c
  1900  000EDC  5807               	subwfb	(___lomod@dividend+6)^0,w,c
  1901  000EDE  5010               	movf	(___lomod@divisor+7)^0,w,c
  1902  000EE0  5808               	subwfb	(___lomod@dividend+7)^0,w,c
  1903  000EE2  A0D8               	btfss	status,0,c
  1904  000EE4  EF76  F007         	goto	u521
  1905  000EE8  EF78  F007         	goto	u520
  1906  000EEC                     u521:
  1907  000EEC  EF88  F007         	goto	l1311
  1908  000EF0                     u520:
  1909  000EF0  5009               	movf	___lomod@divisor^0,w,c
  1910  000EF2  5E01               	subwf	___lomod@dividend^0,f,c
  1911  000EF4  500A               	movf	(___lomod@divisor+1)^0,w,c
  1912  000EF6  5A02               	subwfb	(___lomod@dividend+1)^0,f,c
  1913  000EF8  500B               	movf	(___lomod@divisor+2)^0,w,c
  1914  000EFA  5A03               	subwfb	(___lomod@dividend+2)^0,f,c
  1915  000EFC  500C               	movf	(___lomod@divisor+3)^0,w,c
  1916  000EFE  5A04               	subwfb	(___lomod@dividend+3)^0,f,c
  1917  000F00  500D               	movf	(___lomod@divisor+4)^0,w,c
  1918  000F02  5A05               	subwfb	(___lomod@dividend+4)^0,f,c
  1919  000F04  500E               	movf	(___lomod@divisor+5)^0,w,c
  1920  000F06  5A06               	subwfb	(___lomod@dividend+5)^0,f,c
  1921  000F08  500F               	movf	(___lomod@divisor+6)^0,w,c
  1922  000F0A  5A07               	subwfb	(___lomod@dividend+6)^0,f,c
  1923  000F0C  5010               	movf	(___lomod@divisor+7)^0,w,c
  1924  000F0E  5A08               	subwfb	(___lomod@dividend+7)^0,f,c
  1925  000F10                     l1311:
  1926  000F10  90D8               	bcf	status,0,c
  1927  000F12  3210               	rrcf	(___lomod@divisor+7)^0,f,c
  1928  000F14  320F               	rrcf	(___lomod@divisor+6)^0,f,c
  1929  000F16  320E               	rrcf	(___lomod@divisor+5)^0,f,c
  1930  000F18  320D               	rrcf	(___lomod@divisor+4)^0,f,c
  1931  000F1A  320C               	rrcf	(___lomod@divisor+3)^0,f,c
  1932  000F1C  320B               	rrcf	(___lomod@divisor+2)^0,f,c
  1933  000F1E  320A               	rrcf	(___lomod@divisor+1)^0,f,c
  1934  000F20  3209               	rrcf	___lomod@divisor^0,f,c
  1935  000F22  2E11               	decfsz	___lomod@counter^0,f,c
  1936  000F24  EF61  F007         	goto	l1307
  1937  000F28                     l561:
  1938  000F28  C001  F001         	movff	___lomod@dividend,?___lomod
  1939  000F2C  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
  1940  000F30  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
  1941  000F34  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
  1942  000F38  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
  1943  000F3C  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
  1944  000F40  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
  1945  000F44  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
  1946  000F48  0012               	return		;funcret
  1947  000F4A                     __end_of___lomod:
  1948                           	callstack 0
  1949                           
  1950 ;; *************** function ___lodiv *****************
  1951 ;; Defined at:
  1952 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lodiv.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  dividend        8    0[COMRAM] unsigned long long 
  1955 ;;  divisor         8    8[COMRAM] unsigned long long 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;  quotient        8   16[COMRAM] unsigned long long 
  1958 ;;  counter         1   24[COMRAM] unsigned char 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  8    0[COMRAM] unsigned long long 
  1961 ;; Registers used:
  1962 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1968 ;;      Params:        16       0       0       0       0       0       0       0       0
  1969 ;;      Locals:         9       0       0       0       0       0       0       0       0
  1970 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1971 ;;      Totals:        25       0       0       0       0       0       0       0       0
  1972 ;;Total ram usage:       25 bytes
  1973 ;; Hardware stack levels used: 1
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_utoa
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text11
  1982  000BCE                     __ptext11:
  1983                           	callstack 0
  1984  000BCE                     ___lodiv:
  1985                           	callstack 26
  1986  000BCE  EE20  F011         	lfsr	2,___lodiv@quotient
  1987  000BD2  0E07               	movlw	7
  1988  000BD4                     u461:
  1989  000BD4  6ADE               	clrf	postinc2,c
  1990  000BD6  06E8               	decf	wreg,f,c
  1991  000BD8  E2FD               	bc	u461
  1992  000BDA  5009               	movf	___lodiv@divisor^0,w,c
  1993  000BDC  100A               	iorwf	(___lodiv@divisor+1)^0,w,c
  1994  000BDE  100B               	iorwf	(___lodiv@divisor+2)^0,w,c
  1995  000BE0  100C               	iorwf	(___lodiv@divisor+3)^0,w,c
  1996  000BE2  100D               	iorwf	(___lodiv@divisor+4)^0,w,c
  1997  000BE4  100E               	iorwf	(___lodiv@divisor+5)^0,w,c
  1998  000BE6  100F               	iorwf	(___lodiv@divisor+6)^0,w,c
  1999  000BE8  1010               	iorwf	(___lodiv@divisor+7)^0,w,c
  2000  000BEA  B4D8               	btfsc	status,2,c
  2001  000BEC  EFFA  F005         	goto	u471
  2002  000BF0  EFFC  F005         	goto	u470
  2003  000BF4                     u471:
  2004  000BF4  EF4E  F006         	goto	l551
  2005  000BF8                     u470:
  2006  000BF8  0E01               	movlw	1
  2007  000BFA  6E19               	movwf	___lodiv@counter^0,c
  2008  000BFC  EF0A  F006         	goto	l1285
  2009  000C00                     l1283:
  2010  000C00  90D8               	bcf	status,0,c
  2011  000C02  3609               	rlcf	___lodiv@divisor^0,f,c
  2012  000C04  360A               	rlcf	(___lodiv@divisor+1)^0,f,c
  2013  000C06  360B               	rlcf	(___lodiv@divisor+2)^0,f,c
  2014  000C08  360C               	rlcf	(___lodiv@divisor+3)^0,f,c
  2015  000C0A  360D               	rlcf	(___lodiv@divisor+4)^0,f,c
  2016  000C0C  360E               	rlcf	(___lodiv@divisor+5)^0,f,c
  2017  000C0E  360F               	rlcf	(___lodiv@divisor+6)^0,f,c
  2018  000C10  3610               	rlcf	(___lodiv@divisor+7)^0,f,c
  2019  000C12  2A19               	incf	___lodiv@counter^0,f,c
  2020  000C14                     l1285:
  2021  000C14  AE10               	btfss	(___lodiv@divisor+7)^0,7,c
  2022  000C16  EF0F  F006         	goto	u481
  2023  000C1A  EF11  F006         	goto	u480
  2024  000C1E                     u481:
  2025  000C1E  EF00  F006         	goto	l1283
  2026  000C22                     u480:
  2027  000C22                     l1287:
  2028  000C22  90D8               	bcf	status,0,c
  2029  000C24  3611               	rlcf	___lodiv@quotient^0,f,c
  2030  000C26  3612               	rlcf	(___lodiv@quotient+1)^0,f,c
  2031  000C28  3613               	rlcf	(___lodiv@quotient+2)^0,f,c
  2032  000C2A  3614               	rlcf	(___lodiv@quotient+3)^0,f,c
  2033  000C2C  3615               	rlcf	(___lodiv@quotient+4)^0,f,c
  2034  000C2E  3616               	rlcf	(___lodiv@quotient+5)^0,f,c
  2035  000C30  3617               	rlcf	(___lodiv@quotient+6)^0,f,c
  2036  000C32  3618               	rlcf	(___lodiv@quotient+7)^0,f,c
  2037  000C34  5009               	movf	___lodiv@divisor^0,w,c
  2038  000C36  5C01               	subwf	___lodiv@dividend^0,w,c
  2039  000C38  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2040  000C3A  5802               	subwfb	(___lodiv@dividend+1)^0,w,c
  2041  000C3C  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2042  000C3E  5803               	subwfb	(___lodiv@dividend+2)^0,w,c
  2043  000C40  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2044  000C42  5804               	subwfb	(___lodiv@dividend+3)^0,w,c
  2045  000C44  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2046  000C46  5805               	subwfb	(___lodiv@dividend+4)^0,w,c
  2047  000C48  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2048  000C4A  5806               	subwfb	(___lodiv@dividend+5)^0,w,c
  2049  000C4C  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2050  000C4E  5807               	subwfb	(___lodiv@dividend+6)^0,w,c
  2051  000C50  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2052  000C52  5808               	subwfb	(___lodiv@dividend+7)^0,w,c
  2053  000C54  A0D8               	btfss	status,0,c
  2054  000C56  EF2F  F006         	goto	u491
  2055  000C5A  EF31  F006         	goto	u490
  2056  000C5E                     u491:
  2057  000C5E  EF42  F006         	goto	l1295
  2058  000C62                     u490:
  2059  000C62  5009               	movf	___lodiv@divisor^0,w,c
  2060  000C64  5E01               	subwf	___lodiv@dividend^0,f,c
  2061  000C66  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2062  000C68  5A02               	subwfb	(___lodiv@dividend+1)^0,f,c
  2063  000C6A  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2064  000C6C  5A03               	subwfb	(___lodiv@dividend+2)^0,f,c
  2065  000C6E  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2066  000C70  5A04               	subwfb	(___lodiv@dividend+3)^0,f,c
  2067  000C72  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2068  000C74  5A05               	subwfb	(___lodiv@dividend+4)^0,f,c
  2069  000C76  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2070  000C78  5A06               	subwfb	(___lodiv@dividend+5)^0,f,c
  2071  000C7A  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2072  000C7C  5A07               	subwfb	(___lodiv@dividend+6)^0,f,c
  2073  000C7E  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2074  000C80  5A08               	subwfb	(___lodiv@dividend+7)^0,f,c
  2075  000C82  8011               	bsf	___lodiv@quotient^0,0,c
  2076  000C84                     l1295:
  2077  000C84  90D8               	bcf	status,0,c
  2078  000C86  3210               	rrcf	(___lodiv@divisor+7)^0,f,c
  2079  000C88  320F               	rrcf	(___lodiv@divisor+6)^0,f,c
  2080  000C8A  320E               	rrcf	(___lodiv@divisor+5)^0,f,c
  2081  000C8C  320D               	rrcf	(___lodiv@divisor+4)^0,f,c
  2082  000C8E  320C               	rrcf	(___lodiv@divisor+3)^0,f,c
  2083  000C90  320B               	rrcf	(___lodiv@divisor+2)^0,f,c
  2084  000C92  320A               	rrcf	(___lodiv@divisor+1)^0,f,c
  2085  000C94  3209               	rrcf	___lodiv@divisor^0,f,c
  2086  000C96  2E19               	decfsz	___lodiv@counter^0,f,c
  2087  000C98  EF11  F006         	goto	l1287
  2088  000C9C                     l551:
  2089  000C9C  C011  F001         	movff	___lodiv@quotient,?___lodiv
  2090  000CA0  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
  2091  000CA4  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
  2092  000CA8  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
  2093  000CAC  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
  2094  000CB0  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
  2095  000CB4  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
  2096  000CB8  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
  2097  000CBC  0012               	return		;funcret
  2098  000CBE                     __end_of___lodiv:
  2099                           	callstack 0
  2100                           
  2101 ;; *************** function _Lcd_Write_String *****************
  2102 ;; Defined at:
  2103 ;;		line 104 in file "lcd.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  a               2    4[COMRAM] PTR const unsigned char 
  2106 ;;		 -> buffer(20), 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  i               2    6[COMRAM] int 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2118 ;;      Params:         2       0       0       0       0       0       0       0       0
  2119 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2121 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2122 ;;Total ram usage:        4 bytes
  2123 ;; Hardware stack levels used: 1
  2124 ;; Hardware stack levels required when called: 2
  2125 ;; This function calls:
  2126 ;;		_Lcd_Write_Char
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text12
  2133  0012FC                     __ptext12:
  2134                           	callstack 0
  2135  0012FC                     _Lcd_Write_String:
  2136                           	callstack 28
  2137  0012FC                     
  2138                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
  2139  0012FC  0E00               	movlw	0
  2140  0012FE  6E08               	movwf	(Lcd_Write_String@i+1)^0,c
  2141  001300  0E00               	movlw	0
  2142  001302  6E07               	movwf	Lcd_Write_String@i^0,c
  2143  001304  EF8F  F009         	goto	l1573
  2144  001308                     l1569:
  2145                           
  2146                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
  2147  001308  5007               	movf	Lcd_Write_String@i^0,w,c
  2148  00130A  2405               	addwf	Lcd_Write_String@a^0,w,c
  2149  00130C  6ED9               	movwf	fsr2l,c
  2150  00130E  5008               	movf	(Lcd_Write_String@i+1)^0,w,c
  2151  001310  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2152  001312  6EDA               	movwf	fsr2h,c
  2153  001314  50DF               	movf	indf2,w,c
  2154  001316  ECB9  F009         	call	_Lcd_Write_Char
  2155  00131A  4A07               	infsnz	Lcd_Write_String@i^0,f,c
  2156  00131C  2A08               	incf	(Lcd_Write_String@i+1)^0,f,c
  2157  00131E                     l1573:
  2158  00131E  5007               	movf	Lcd_Write_String@i^0,w,c
  2159  001320  2405               	addwf	Lcd_Write_String@a^0,w,c
  2160  001322  6ED9               	movwf	fsr2l,c
  2161  001324  5008               	movf	(Lcd_Write_String@i+1)^0,w,c
  2162  001326  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2163  001328  6EDA               	movwf	fsr2h,c
  2164  00132A  50DF               	movf	indf2,w,c
  2165  00132C  A4D8               	btfss	status,2,c
  2166  00132E  EF9B  F009         	goto	u781
  2167  001332  EF9D  F009         	goto	u780
  2168  001336                     u781:
  2169  001336  EF84  F009         	goto	l1569
  2170  00133A                     u780:
  2171  00133A  0012               	return		;funcret
  2172  00133C                     __end_of_Lcd_Write_String:
  2173                           	callstack 0
  2174                           
  2175 ;; *************** function _Lcd_Write_Char *****************
  2176 ;; Defined at:
  2177 ;;		line 88 in file "lcd.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  a               1    wreg     unsigned char 
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  a               1    3[COMRAM] unsigned char 
  2182 ;;  y               1    2[COMRAM] unsigned char 
  2183 ;;  temp            1    1[COMRAM] unsigned char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  1    wreg      void 
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2193 ;;      Params:         0       0       0       0       0       0       0       0       0
  2194 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2196 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2197 ;;Total ram usage:        3 bytes
  2198 ;; Hardware stack levels used: 1
  2199 ;; Hardware stack levels required when called: 1
  2200 ;; This function calls:
  2201 ;;		_Lcd_Port
  2202 ;; This function is called by:
  2203 ;;		_Lcd_Write_String
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text13
  2208  001372                     __ptext13:
  2209                           	callstack 0
  2210  001372                     _Lcd_Write_Char:
  2211                           	callstack 28
  2212                           
  2213                           ;incstack = 0
  2214                           ;Lcd_Write_Char@a stored from wreg
  2215  001372  6E04               	movwf	Lcd_Write_Char@a^0,c
  2216  001374                     
  2217                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
  2218  001374  5004               	movf	Lcd_Write_Char@a^0,w,c
  2219  001376  0B0F               	andlw	15
  2220  001378  6E02               	movwf	Lcd_Write_Char@temp^0,c
  2221                           
  2222                           ;lcd.c: 92:     y = a&0xF0;
  2223  00137A  5004               	movf	Lcd_Write_Char@a^0,w,c
  2224  00137C  0BF0               	andlw	240
  2225  00137E  6E03               	movwf	Lcd_Write_Char@y^0,c
  2226  001380                     
  2227                           ;lcd.c: 93:     LATDbits.LD2 = 1;
  2228  001380  848C               	bsf	140,2,c	;volatile
  2229  001382                     
  2230                           ;lcd.c: 94:     Lcd_Port(y>>4);
  2231  001382  3803               	swapf	Lcd_Write_Char@y^0,w,c
  2232  001384  0B0F               	andlw	15
  2233  001386  ECE2  F008         	call	_Lcd_Port
  2234  00138A                     
  2235                           ;lcd.c: 95:     LATDbits.LD3 = 1;
  2236  00138A  868C               	bsf	140,3,c	;volatile
  2237  00138C                     
  2238                           ;lcd.c: 96:     _delay((unsigned long)((40)*(48000000/4000000.0)));
  2239  00138C  0EA0               	movlw	160
  2240  00138E                     u807:
  2241  00138E  2EE8               	decfsz	wreg,f,c
  2242  001390  D7FE               	bra	u807
  2243  001392                     
  2244                           ;lcd.c: 97:     LATDbits.LD3 = 0;
  2245  001392  968C               	bcf	140,3,c	;volatile
  2246  001394                     
  2247                           ;lcd.c: 98:     Lcd_Port(temp);
  2248  001394  5002               	movf	Lcd_Write_Char@temp^0,w,c
  2249  001396  ECE2  F008         	call	_Lcd_Port
  2250  00139A                     
  2251                           ;lcd.c: 99:     LATDbits.LD3 = 1;
  2252  00139A  868C               	bsf	140,3,c	;volatile
  2253  00139C                     
  2254                           ;lcd.c: 100:     _delay((unsigned long)((40)*(48000000/4000000.0)));
  2255  00139C  0EA0               	movlw	160
  2256  00139E                     u817:
  2257  00139E  2EE8               	decfsz	wreg,f,c
  2258  0013A0  D7FE               	bra	u817
  2259  0013A2                     
  2260                           ;lcd.c: 101:     LATDbits.LD3 = 0;
  2261  0013A2  968C               	bcf	140,3,c	;volatile
  2262  0013A4  0012               	return		;funcret
  2263  0013A6                     __end_of_Lcd_Write_Char:
  2264                           	callstack 0
  2265                           
  2266 ;; *************** function _Lcd_Set_Cursor *****************
  2267 ;; Defined at:
  2268 ;;		line 26 in file "lcd.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  a               1    wreg     unsigned char 
  2271 ;;  b               1    3[COMRAM] unsigned char 
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;  a               1    4[COMRAM] unsigned char 
  2274 ;;  temp            1    7[COMRAM] unsigned char 
  2275 ;;  y               1    6[COMRAM] unsigned char 
  2276 ;;  z               1    5[COMRAM] unsigned char 
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  1    wreg      void 
  2279 ;; Registers used:
  2280 ;;		wreg, status,2, status,0, cstack
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2286 ;;      Params:         1       0       0       0       0       0       0       0       0
  2287 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2288 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2289 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2290 ;;Total ram usage:        5 bytes
  2291 ;; Hardware stack levels used: 1
  2292 ;; Hardware stack levels required when called: 2
  2293 ;; This function calls:
  2294 ;;		_Lcd_Cmd
  2295 ;; This function is called by:
  2296 ;;		_main
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           	psect	text14
  2301  000DA8                     __ptext14:
  2302                           	callstack 0
  2303  000DA8                     _Lcd_Set_Cursor:
  2304                           	callstack 28
  2305                           
  2306                           ;incstack = 0
  2307                           ;Lcd_Set_Cursor@a stored from wreg
  2308  000DA8  6E05               	movwf	Lcd_Set_Cursor@a^0,c
  2309  000DAA                     
  2310                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
  2311  000DAA  0405               	decf	Lcd_Set_Cursor@a^0,w,c
  2312  000DAC  A4D8               	btfss	status,2,c
  2313  000DAE  EFDB  F006         	goto	u741
  2314  000DB2  EFDD  F006         	goto	u740
  2315  000DB6                     u741:
  2316  000DB6  EFEE  F006         	goto	l1531
  2317  000DBA                     u740:
  2318  000DBA                     
  2319                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
  2320  000DBA  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  2321  000DBC  0F7F               	addlw	127
  2322  000DBE  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  2323                           
  2324                           ;lcd.c: 32:         z = temp>>4;
  2325  000DC0  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2326  000DC2  0B0F               	andlw	15
  2327  000DC4  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  2328                           
  2329                           ;lcd.c: 33:         y = temp & 0x0F;
  2330  000DC6  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  2331  000DC8  0B0F               	andlw	15
  2332  000DCA  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  2333  000DCC                     
  2334                           ;lcd.c: 34:         Lcd_Cmd(z);
  2335  000DCC  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  2336  000DCE  ECD3  F009         	call	_Lcd_Cmd
  2337  000DD2                     
  2338                           ;lcd.c: 35:         Lcd_Cmd(y);
  2339  000DD2  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  2340  000DD4  ECD3  F009         	call	_Lcd_Cmd
  2341                           
  2342                           ;lcd.c: 36:     }
  2343  000DD8  EF3C  F007         	goto	l86
  2344  000DDC                     l1531:
  2345  000DDC  0E02               	movlw	2
  2346  000DDE  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
  2347  000DE0  A4D8               	btfss	status,2,c
  2348  000DE2  EFF5  F006         	goto	u751
  2349  000DE6  EFF7  F006         	goto	u750
  2350  000DEA                     u751:
  2351  000DEA  EF08  F007         	goto	l1539
  2352  000DEE                     u750:
  2353  000DEE                     
  2354                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
  2355  000DEE  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  2356  000DF0  0FBF               	addlw	191
  2357  000DF2  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  2358                           
  2359                           ;lcd.c: 40:         z = temp>>4;
  2360  000DF4  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2361  000DF6  0B0F               	andlw	15
  2362  000DF8  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  2363                           
  2364                           ;lcd.c: 41:         y = temp & 0x0F;
  2365  000DFA  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  2366  000DFC  0B0F               	andlw	15
  2367  000DFE  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  2368  000E00                     
  2369                           ;lcd.c: 42:         Lcd_Cmd(z);
  2370  000E00  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  2371  000E02  ECD3  F009         	call	_Lcd_Cmd
  2372  000E06                     
  2373                           ;lcd.c: 43:         Lcd_Cmd(y);
  2374  000E06  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  2375  000E08  ECD3  F009         	call	_Lcd_Cmd
  2376                           
  2377                           ;lcd.c: 44:     }
  2378  000E0C  EF3C  F007         	goto	l86
  2379  000E10                     l1539:
  2380  000E10  0E03               	movlw	3
  2381  000E12  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
  2382  000E14  A4D8               	btfss	status,2,c
  2383  000E16  EF0F  F007         	goto	u761
  2384  000E1A  EF11  F007         	goto	u760
  2385  000E1E                     u761:
  2386  000E1E  EF22  F007         	goto	l1547
  2387  000E22                     u760:
  2388  000E22                     
  2389                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x94 + b - 1;
  2390  000E22  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  2391  000E24  0F93               	addlw	147
  2392  000E26  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  2393                           
  2394                           ;lcd.c: 48:         z = temp>>4;
  2395  000E28  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2396  000E2A  0B0F               	andlw	15
  2397  000E2C  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  2398                           
  2399                           ;lcd.c: 49:         y = temp & 0x0F;
  2400  000E2E  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  2401  000E30  0B0F               	andlw	15
  2402  000E32  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  2403  000E34                     
  2404                           ;lcd.c: 50:         Lcd_Cmd(z);
  2405  000E34  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  2406  000E36  ECD3  F009         	call	_Lcd_Cmd
  2407  000E3A                     
  2408                           ;lcd.c: 51:         Lcd_Cmd(y);
  2409  000E3A  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  2410  000E3C  ECD3  F009         	call	_Lcd_Cmd
  2411                           
  2412                           ;lcd.c: 52:     }
  2413  000E40  EF3C  F007         	goto	l86
  2414  000E44                     l1547:
  2415  000E44  0E04               	movlw	4
  2416  000E46  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
  2417  000E48  A4D8               	btfss	status,2,c
  2418  000E4A  EF29  F007         	goto	u771
  2419  000E4E  EF2B  F007         	goto	u770
  2420  000E52                     u771:
  2421  000E52  EF3C  F007         	goto	l82
  2422  000E56                     u770:
  2423  000E56                     
  2424                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD4 + b - 1;
  2425  000E56  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  2426  000E58  0FD3               	addlw	211
  2427  000E5A  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  2428                           
  2429                           ;lcd.c: 56:         z = temp>>4;
  2430  000E5C  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2431  000E5E  0B0F               	andlw	15
  2432  000E60  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  2433                           
  2434                           ;lcd.c: 57:         y = temp & 0x0F;
  2435  000E62  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  2436  000E64  0B0F               	andlw	15
  2437  000E66  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  2438  000E68                     
  2439                           ;lcd.c: 58:         Lcd_Cmd(z);
  2440  000E68  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  2441  000E6A  ECD3  F009         	call	_Lcd_Cmd
  2442  000E6E                     
  2443                           ;lcd.c: 59:         Lcd_Cmd(y);
  2444  000E6E  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  2445  000E70  ECD3  F009         	call	_Lcd_Cmd
  2446  000E74  EF3C  F007         	goto	l86
  2447  000E78                     l82:
  2448  000E78                     l86:
  2449  000E78  0012               	return		;funcret
  2450  000E7A                     __end_of_Lcd_Set_Cursor:
  2451                           	callstack 0
  2452                           
  2453 ;; *************** function _Lcd_Init *****************
  2454 ;; Defined at:
  2455 ;;		line 63 in file "lcd.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;		None
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2469 ;;      Params:         0       0       0       0       0       0       0       0       0
  2470 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2471 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2472 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2473 ;;Total ram usage:        2 bytes
  2474 ;; Hardware stack levels used: 1
  2475 ;; Hardware stack levels required when called: 3
  2476 ;; This function calls:
  2477 ;;		_Lcd_Clear
  2478 ;;		_Lcd_Cmd
  2479 ;;		_Lcd_Port
  2480 ;; This function is called by:
  2481 ;;		_main
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text15
  2486  0010D6                     __ptext15:
  2487                           	callstack 0
  2488  0010D6                     _Lcd_Init:
  2489                           	callstack 27
  2490  0010D6                     
  2491                           ;lcd.c: 65:  TRISDbits.TRISD2 = 0;
  2492  0010D6  9495               	bcf	149,2,c	;volatile
  2493                           
  2494                           ;lcd.c: 66:  TRISDbits.TRISD3 = 0;
  2495  0010D8  9695               	bcf	149,3,c	;volatile
  2496                           
  2497                           ;lcd.c: 67:  TRISDbits.TRISD4 = 0;
  2498  0010DA  9895               	bcf	149,4,c	;volatile
  2499                           
  2500                           ;lcd.c: 68:  TRISDbits.TRISD5 = 0;
  2501  0010DC  9A95               	bcf	149,5,c	;volatile
  2502                           
  2503                           ;lcd.c: 69:  TRISDbits.TRISD6 = 0;
  2504  0010DE  9C95               	bcf	149,6,c	;volatile
  2505                           
  2506                           ;lcd.c: 70:  TRISDbits.TRISD7 = 0;
  2507  0010E0  9E95               	bcf	149,7,c	;volatile
  2508  0010E2                     
  2509                           ;lcd.c: 71:     Lcd_Port(0x00);
  2510  0010E2  0E00               	movlw	0
  2511  0010E4  ECE2  F008         	call	_Lcd_Port
  2512  0010E8                     
  2513                           ;lcd.c: 72:     _delay((unsigned long)((20)*(48000000/4000.0)));
  2514  0010E8  0E02               	movlw	2
  2515  0010EA  6E05               	movwf	(??_Lcd_Init+1)^0,c
  2516  0010EC  0E38               	movlw	56
  2517  0010EE  6E04               	movwf	??_Lcd_Init^0,c
  2518  0010F0  0EAD               	movlw	173
  2519  0010F2                     u827:
  2520  0010F2  2EE8               	decfsz	wreg,f,c
  2521  0010F4  D7FE               	bra	u827
  2522  0010F6  2E04               	decfsz	??_Lcd_Init^0,f,c
  2523  0010F8  D7FC               	bra	u827
  2524  0010FA  2E05               	decfsz	(??_Lcd_Init+1)^0,f,c
  2525  0010FC  D7FA               	bra	u827
  2526  0010FE  F000               	nop	
  2527  001100                     
  2528                           ;lcd.c: 73:     Lcd_Cmd(0x03);
  2529  001100  0E03               	movlw	3
  2530  001102  ECD3  F009         	call	_Lcd_Cmd
  2531  001106                     
  2532                           ;lcd.c: 74:     _delay((unsigned long)((5)*(48000000/4000.0)));
  2533  001106  0E4E               	movlw	78
  2534  001108  6E04               	movwf	??_Lcd_Init^0,c
  2535  00110A  0EEB               	movlw	235
  2536  00110C                     u837:
  2537  00110C  2EE8               	decfsz	wreg,f,c
  2538  00110E  D7FE               	bra	u837
  2539  001110  2E04               	decfsz	??_Lcd_Init^0,f,c
  2540  001112  D7FC               	bra	u837
  2541  001114  F000               	nop	
  2542  001116                     
  2543                           ;lcd.c: 75:     Lcd_Cmd(0x03);
  2544  001116  0E03               	movlw	3
  2545  001118  ECD3  F009         	call	_Lcd_Cmd
  2546  00111C                     
  2547                           ;lcd.c: 76:     _delay((unsigned long)((11)*(48000000/4000.0)));
  2548  00111C  0EAC               	movlw	172
  2549  00111E  6E04               	movwf	??_Lcd_Init^0,c
  2550  001120  0E6C               	movlw	108
  2551  001122                     u847:
  2552  001122  2EE8               	decfsz	wreg,f,c
  2553  001124  D7FE               	bra	u847
  2554  001126  2E04               	decfsz	??_Lcd_Init^0,f,c
  2555  001128  D7FC               	bra	u847
  2556  00112A  D000               	nop2	
  2557  00112C                     
  2558                           ;lcd.c: 77:     Lcd_Cmd(0x03);
  2559  00112C  0E03               	movlw	3
  2560  00112E  ECD3  F009         	call	_Lcd_Cmd
  2561  001132                     
  2562                           ;lcd.c: 78:     Lcd_Cmd(0x02);
  2563  001132  0E02               	movlw	2
  2564  001134  ECD3  F009         	call	_Lcd_Cmd
  2565  001138                     
  2566                           ;lcd.c: 79:     Lcd_Cmd(0x02);
  2567  001138  0E02               	movlw	2
  2568  00113A  ECD3  F009         	call	_Lcd_Cmd
  2569  00113E                     
  2570                           ;lcd.c: 80:     Lcd_Cmd(0x08);
  2571  00113E  0E08               	movlw	8
  2572  001140  ECD3  F009         	call	_Lcd_Cmd
  2573  001144                     
  2574                           ;lcd.c: 81:     Lcd_Cmd(0x00);
  2575  001144  0E00               	movlw	0
  2576  001146  ECD3  F009         	call	_Lcd_Cmd
  2577  00114A                     
  2578                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
  2579  00114A  0E0C               	movlw	12
  2580  00114C  ECD3  F009         	call	_Lcd_Cmd
  2581  001150                     
  2582                           ;lcd.c: 83:     Lcd_Cmd(0x00);
  2583  001150  0E00               	movlw	0
  2584  001152  ECD3  F009         	call	_Lcd_Cmd
  2585  001156                     
  2586                           ;lcd.c: 84:     Lcd_Cmd(0x06);
  2587  001156  0E06               	movlw	6
  2588  001158  ECD3  F009         	call	_Lcd_Cmd
  2589  00115C                     
  2590                           ;lcd.c: 85:     Lcd_Clear();
  2591  00115C  ECFA  F009         	call	_Lcd_Clear	;wreg free
  2592  001160  0012               	return		;funcret
  2593  001162                     __end_of_Lcd_Init:
  2594                           	callstack 0
  2595                           
  2596 ;; *************** function _Lcd_Clear *****************
  2597 ;; Defined at:
  2598 ;;		line 20 in file "lcd.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;		None
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;		None
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg, status,2, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2612 ;;      Params:         0       0       0       0       0       0       0       0       0
  2613 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2614 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2615 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2616 ;;Total ram usage:        0 bytes
  2617 ;; Hardware stack levels used: 1
  2618 ;; Hardware stack levels required when called: 2
  2619 ;; This function calls:
  2620 ;;		_Lcd_Cmd
  2621 ;; This function is called by:
  2622 ;;		_Lcd_Init
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text16
  2627  0013F4                     __ptext16:
  2628                           	callstack 0
  2629  0013F4                     _Lcd_Clear:
  2630                           	callstack 27
  2631  0013F4                     
  2632                           ;lcd.c: 22:     Lcd_Cmd(0);
  2633  0013F4  0E00               	movlw	0
  2634  0013F6  ECD3  F009         	call	_Lcd_Cmd
  2635                           
  2636                           ;lcd.c: 23:     Lcd_Cmd(1);
  2637  0013FA  0E01               	movlw	1
  2638  0013FC  ECD3  F009         	call	_Lcd_Cmd
  2639  001400  0012               	return		;funcret
  2640  001402                     __end_of_Lcd_Clear:
  2641                           	callstack 0
  2642                           
  2643 ;; *************** function _Lcd_Cmd *****************
  2644 ;; Defined at:
  2645 ;;		line 11 in file "lcd.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  a               1    wreg     unsigned char 
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;  a               1    2[COMRAM] unsigned char 
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      void 
  2652 ;; Registers used:
  2653 ;;		wreg, status,2, cstack
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2659 ;;      Params:         0       0       0       0       0       0       0       0       0
  2660 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2661 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2662 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2663 ;;Total ram usage:        2 bytes
  2664 ;; Hardware stack levels used: 1
  2665 ;; Hardware stack levels required when called: 1
  2666 ;; This function calls:
  2667 ;;		_Lcd_Port
  2668 ;; This function is called by:
  2669 ;;		_Lcd_Clear
  2670 ;;		_Lcd_Set_Cursor
  2671 ;;		_Lcd_Init
  2672 ;;		_Lcd_Shift_Right
  2673 ;;		_Lcd_Shift_Left
  2674 ;;		_Lcd_Blink
  2675 ;;		_Lcd_NoBlink
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text17
  2680  0013A6                     __ptext17:
  2681                           	callstack 0
  2682  0013A6                     _Lcd_Cmd:
  2683                           	callstack 28
  2684                           
  2685                           ;incstack = 0
  2686                           ;Lcd_Cmd@a stored from wreg
  2687  0013A6  6E03               	movwf	Lcd_Cmd@a^0,c
  2688  0013A8                     
  2689                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATDbits.LD2 = 0;
  2690  0013A8  948C               	bcf	140,2,c	;volatile
  2691  0013AA                     
  2692                           ;lcd.c: 14:     Lcd_Port(a);
  2693  0013AA  5003               	movf	Lcd_Cmd@a^0,w,c
  2694  0013AC  ECE2  F008         	call	_Lcd_Port
  2695  0013B0                     
  2696                           ;lcd.c: 15:     LATDbits.LD3 = 1;
  2697  0013B0  868C               	bsf	140,3,c	;volatile
  2698  0013B2                     
  2699                           ;lcd.c: 16:     _delay((unsigned long)((4)*(48000000/4000.0)));
  2700  0013B2  0E3F               	movlw	63
  2701  0013B4  6E02               	movwf	??_Lcd_Cmd^0,c
  2702  0013B6  0E55               	movlw	85
  2703  0013B8                     u857:
  2704  0013B8  2EE8               	decfsz	wreg,f,c
  2705  0013BA  D7FE               	bra	u857
  2706  0013BC  2E02               	decfsz	??_Lcd_Cmd^0,f,c
  2707  0013BE  D7FC               	bra	u857
  2708  0013C0  F000               	nop	
  2709  0013C2                     
  2710                           ;lcd.c: 17:     LATDbits.LD3 = 0;
  2711  0013C2  968C               	bcf	140,3,c	;volatile
  2712  0013C4  0012               	return		;funcret
  2713  0013C6                     __end_of_Lcd_Cmd:
  2714                           	callstack 0
  2715                           
  2716 ;; *************** function _Lcd_Port *****************
  2717 ;; Defined at:
  2718 ;;		line 3 in file "lcd.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  a               1    wreg     unsigned char 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  a               1    0[COMRAM] unsigned char 
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  1    wreg      void 
  2725 ;; Registers used:
  2726 ;;		wreg
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2732 ;;      Params:         0       0       0       0       0       0       0       0       0
  2733 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2734 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2735 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2736 ;;Total ram usage:        1 bytes
  2737 ;; Hardware stack levels used: 1
  2738 ;; This function calls:
  2739 ;;		Nothing
  2740 ;; This function is called by:
  2741 ;;		_Lcd_Cmd
  2742 ;;		_Lcd_Init
  2743 ;;		_Lcd_Write_Char
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text18
  2748  0011C4                     __ptext18:
  2749                           	callstack 0
  2750  0011C4                     _Lcd_Port:
  2751                           	callstack 28
  2752                           
  2753                           ;incstack = 0
  2754                           ;Lcd_Port@a stored from wreg
  2755  0011C4  6E01               	movwf	Lcd_Port@a^0,c
  2756  0011C6                     
  2757                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
  2758  0011C6  A001               	btfss	Lcd_Port@a^0,0,c
  2759  0011C8  EFE8  F008         	goto	u571
  2760  0011CC  EFEA  F008         	goto	u570
  2761  0011D0                     u571:
  2762  0011D0  EFED  F008         	goto	l55
  2763  0011D4                     u570:
  2764  0011D4  888C               	bsf	140,4,c	;volatile
  2765  0011D6  EFEE  F008         	goto	l1341
  2766  0011DA                     l55:
  2767  0011DA  988C               	bcf	140,4,c	;volatile
  2768  0011DC                     l1341:
  2769                           
  2770                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
  2771  0011DC  A201               	btfss	Lcd_Port@a^0,1,c
  2772  0011DE  EFF3  F008         	goto	u581
  2773  0011E2  EFF5  F008         	goto	u580
  2774  0011E6                     u581:
  2775  0011E6  EFF8  F008         	goto	l59
  2776  0011EA                     u580:
  2777  0011EA  8A8C               	bsf	140,5,c	;volatile
  2778  0011EC  EFF9  F008         	goto	l1345
  2779  0011F0                     l59:
  2780  0011F0  9A8C               	bcf	140,5,c	;volatile
  2781  0011F2                     l1345:
  2782                           
  2783                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
  2784  0011F2  A401               	btfss	Lcd_Port@a^0,2,c
  2785  0011F4  EFFE  F008         	goto	u591
  2786  0011F8  EF00  F009         	goto	u590
  2787  0011FC                     u591:
  2788  0011FC  EF03  F009         	goto	l63
  2789  001200                     u590:
  2790  001200  8C8C               	bsf	140,6,c	;volatile
  2791  001202  EF04  F009         	goto	l1349
  2792  001206                     l63:
  2793  001206  9C8C               	bcf	140,6,c	;volatile
  2794  001208                     l1349:
  2795                           
  2796                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
  2797  001208  A601               	btfss	Lcd_Port@a^0,3,c
  2798  00120A  EF09  F009         	goto	u601
  2799  00120E  EF0B  F009         	goto	u600
  2800  001212                     u601:
  2801  001212  EF0E  F009         	goto	l67
  2802  001216                     u600:
  2803  001216  8E8C               	bsf	140,7,c	;volatile
  2804  001218  EF0F  F009         	goto	l70
  2805  00121C                     l67:
  2806  00121C  9E8C               	bcf	140,7,c	;volatile
  2807  00121E                     l70:
  2808  00121E  0012               	return		;funcret
  2809  001220                     __end_of_Lcd_Port:
  2810                           	callstack 0
  2811                           
  2812 ;; *************** function _ADC_Read *****************
  2813 ;; Defined at:
  2814 ;;		line 18 in file "adc.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;  ch              1    wreg     unsigned char 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  ch              1    2[COMRAM] unsigned char 
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  2    0[COMRAM] unsigned int 
  2821 ;; Registers used:
  2822 ;;		wreg, status,2, status,0
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2828 ;;      Params:         2       0       0       0       0       0       0       0       0
  2829 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2830 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2831 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2832 ;;Total ram usage:        3 bytes
  2833 ;; Hardware stack levels used: 1
  2834 ;; This function calls:
  2835 ;;		Nothing
  2836 ;; This function is called by:
  2837 ;;		_main
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text19
  2842  001272                     __ptext19:
  2843                           	callstack 0
  2844  001272                     _ADC_Read:
  2845                           	callstack 30
  2846                           
  2847                           ;incstack = 0
  2848                           ;ADC_Read@ch stored from wreg
  2849  001272  6E03               	movwf	ADC_Read@ch^0,c
  2850  001274                     
  2851                           ;adc.c: 18: unsigned int ADC_Read(unsigned char ch);adc.c: 19: {;adc.c: 20:     if(ch > 
      +                          13){
  2852  001274  0E0D               	movlw	13
  2853  001276  6403               	cpfsgt	ADC_Read@ch^0,c
  2854  001278  EF40  F009         	goto	u721
  2855  00127C  EF42  F009         	goto	u720
  2856  001280                     u721:
  2857  001280  EF48  F009         	goto	l1515
  2858  001284                     u720:
  2859  001284                     
  2860                           ;adc.c: 21:         return 0;
  2861  001284  0E00               	movlw	0
  2862  001286  6E02               	movwf	(?_ADC_Read+1)^0,c
  2863  001288  0E00               	movlw	0
  2864  00128A  6E01               	movwf	?_ADC_Read^0,c
  2865  00128C  EF5B  F009         	goto	l41
  2866  001290                     l1515:
  2867                           
  2868                           ;adc.c: 23:         ADCON0 = 0x00;
  2869  001290  0E00               	movlw	0
  2870  001292  6EC2               	movwf	194,c	;volatile
  2871  001294                     
  2872                           ;adc.c: 24:         ADCON0 = (ch << 2);
  2873  001294  4403               	rlncf	ADC_Read@ch^0,w,c
  2874  001296  46E8               	rlncf	wreg,f,c
  2875  001298  0BFC               	andlw	252
  2876  00129A  6EC2               	movwf	194,c	;volatile
  2877  00129C                     
  2878                           ;adc.c: 25:         ADCON0bits.ADON = 1;
  2879  00129C  80C2               	bsf	194,0,c	;volatile
  2880  00129E                     
  2881                           ;adc.c: 26:         ADCON0bits.GO_DONE = 1;
  2882  00129E  82C2               	bsf	194,1,c	;volatile
  2883  0012A0                     l43:
  2884  0012A0  B2C2               	btfsc	194,1,c	;volatile
  2885  0012A2  EF55  F009         	goto	u731
  2886  0012A6  EF57  F009         	goto	u730
  2887  0012AA                     u731:
  2888  0012AA  EF50  F009         	goto	l43
  2889  0012AE                     u730:
  2890  0012AE                     
  2891                           ;adc.c: 28:         return ADRES;
  2892  0012AE  CFC3 F001          	movff	4035,?_ADC_Read	;volatile
  2893  0012B2  CFC4 F002          	movff	4036,?_ADC_Read+1	;volatile
  2894  0012B6                     l41:
  2895  0012B6  0012               	return		;funcret
  2896  0012B8                     __end_of_ADC_Read:
  2897                           	callstack 0
  2898                           
  2899 ;; *************** function _ADC_Init *****************
  2900 ;; Defined at:
  2901 ;;		line 11 in file "adc.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;  p_ang           1    wreg     unsigned char 
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  p_ang           1    0[COMRAM] unsigned char 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2915 ;;      Params:         0       0       0       0       0       0       0       0       0
  2916 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2918 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2919 ;;Total ram usage:        1 bytes
  2920 ;; Hardware stack levels used: 1
  2921 ;; This function calls:
  2922 ;;		Nothing
  2923 ;; This function is called by:
  2924 ;;		_main
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           	psect	text20
  2929  0013E4                     __ptext20:
  2930                           	callstack 0
  2931  0013E4                     _ADC_Init:
  2932                           	callstack 30
  2933                           
  2934                           ;incstack = 0
  2935                           ;ADC_Init@p_ang stored from wreg
  2936  0013E4  6E01               	movwf	ADC_Init@p_ang^0,c
  2937  0013E6                     
  2938                           ;adc.c: 11: void ADC_Init(unsigned char p_ang);adc.c: 12: {;adc.c: 13:     ADCON1 = p_an
      +                          g;
  2939  0013E6  C001  FFC1         	movff	ADC_Init@p_ang,4033	;volatile
  2940  0013EA                     
  2941                           ;adc.c: 14:     ADCON0 = 0x00;
  2942  0013EA  0E00               	movlw	0
  2943  0013EC  6EC2               	movwf	194,c	;volatile
  2944  0013EE                     
  2945                           ;adc.c: 15:     ADCON2 = 0x8F;
  2946  0013EE  0E8F               	movlw	143
  2947  0013F0  6EC0               	movwf	192,c	;volatile
  2948  0013F2  0012               	return		;funcret
  2949  0013F4                     __end_of_ADC_Init:
  2950                           	callstack 0
  2951                           
  2952                           	psect	rparam
  2953  0000                     
  2954                           	psect	idloc
  2955                           
  2956                           ;Config register IDLOC0 @ 0x200000
  2957                           ;	unspecified, using default values
  2958  200000                     	org	2097152
  2959  200000  FF                 	db	255
  2960                           
  2961                           ;Config register IDLOC1 @ 0x200001
  2962                           ;	unspecified, using default values
  2963  200001                     	org	2097153
  2964  200001  FF                 	db	255
  2965                           
  2966                           ;Config register IDLOC2 @ 0x200002
  2967                           ;	unspecified, using default values
  2968  200002                     	org	2097154
  2969  200002  FF                 	db	255
  2970                           
  2971                           ;Config register IDLOC3 @ 0x200003
  2972                           ;	unspecified, using default values
  2973  200003                     	org	2097155
  2974  200003  FF                 	db	255
  2975                           
  2976                           ;Config register IDLOC4 @ 0x200004
  2977                           ;	unspecified, using default values
  2978  200004                     	org	2097156
  2979  200004  FF                 	db	255
  2980                           
  2981                           ;Config register IDLOC5 @ 0x200005
  2982                           ;	unspecified, using default values
  2983  200005                     	org	2097157
  2984  200005  FF                 	db	255
  2985                           
  2986                           ;Config register IDLOC6 @ 0x200006
  2987                           ;	unspecified, using default values
  2988  200006                     	org	2097158
  2989  200006  FF                 	db	255
  2990                           
  2991                           ;Config register IDLOC7 @ 0x200007
  2992                           ;	unspecified, using default values
  2993  200007                     	org	2097159
  2994  200007  FF                 	db	255
  2995                           
  2996                           	psect	config
  2997                           
  2998                           ;Config register CONFIG1L @ 0x300000
  2999                           ;	PLL Prescaler Selection bits
  3000                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  3001                           ;	System Clock Postscaler Selection bits
  3002                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3003                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3004                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  3005  300000                     	org	3145728
  3006  300000  21                 	db	33
  3007                           
  3008                           ;Config register CONFIG1H @ 0x300001
  3009                           ;	Oscillator Selection bits
  3010                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  3011                           ;	Fail-Safe Clock Monitor Enable bit
  3012                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3013                           ;	Internal/External Oscillator Switchover bit
  3014                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3015  300001                     	org	3145729
  3016  300001  0E                 	db	14
  3017                           
  3018                           ;Config register CONFIG2L @ 0x300002
  3019                           ;	Power-up Timer Enable bit
  3020                           ;	PWRT = OFF, PWRT disabled
  3021                           ;	Brown-out Reset Enable bits
  3022                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3023                           ;	Brown-out Reset Voltage bits
  3024                           ;	BORV = 3, Minimum setting 2.05V
  3025                           ;	USB Voltage Regulator Enable bit
  3026                           ;	VREGEN = OFF, USB voltage regulator disabled
  3027  300002                     	org	3145730
  3028  300002  19                 	db	25
  3029                           
  3030                           ;Config register CONFIG2H @ 0x300003
  3031                           ;	Watchdog Timer Enable bit
  3032                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3033                           ;	Watchdog Timer Postscale Select bits
  3034                           ;	WDTPS = 32768, 1:32768
  3035  300003                     	org	3145731
  3036  300003  1E                 	db	30
  3037                           
  3038                           ; Padding undefined space
  3039  300004                     	org	3145732
  3040  300004  FF                 	db	255
  3041                           
  3042                           ;Config register CONFIG3H @ 0x300005
  3043                           ;	CCP2 MUX bit
  3044                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  3045                           ;	PORTB A/D Enable bit
  3046                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3047                           ;	Low-Power Timer 1 Oscillator Enable bit
  3048                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3049                           ;	MCLR Pin Enable bit
  3050                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3051  300005                     	org	3145733
  3052  300005  81                 	db	129
  3053                           
  3054                           ;Config register CONFIG4L @ 0x300006
  3055                           ;	Stack Full/Underflow Reset Enable bit
  3056                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3057                           ;	Single-Supply ICSP Enable bit
  3058                           ;	LVP = OFF, Single-Supply ICSP disabled
  3059                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3060                           ;	ICPRT = OFF, ICPORT disabled
  3061                           ;	Extended Instruction Set Enable bit
  3062                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3063                           ;	Background Debugger Enable bit
  3064                           ;	DEBUG = 0x1, unprogrammed default
  3065  300006                     	org	3145734
  3066  300006  81                 	db	129
  3067                           
  3068                           ; Padding undefined space
  3069  300007                     	org	3145735
  3070  300007  FF                 	db	255
  3071                           
  3072                           ;Config register CONFIG5L @ 0x300008
  3073                           ;	Code Protection bit
  3074                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  3075                           ;	Code Protection bit
  3076                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  3077                           ;	Code Protection bit
  3078                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  3079                           ;	Code Protection bit
  3080                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  3081  300008                     	org	3145736
  3082  300008  0F                 	db	15
  3083                           
  3084                           ;Config register CONFIG5H @ 0x300009
  3085                           ;	Boot Block Code Protection bit
  3086                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3087                           ;	Data EEPROM Code Protection bit
  3088                           ;	CPD = OFF, Data EEPROM is not code-protected
  3089  300009                     	org	3145737
  3090  300009  C0                 	db	192
  3091                           
  3092                           ;Config register CONFIG6L @ 0x30000A
  3093                           ;	Write Protection bit
  3094                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3095                           ;	Write Protection bit
  3096                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3097                           ;	Write Protection bit
  3098                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  3099                           ;	Write Protection bit
  3100                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  3101  30000A                     	org	3145738
  3102  30000A  0F                 	db	15
  3103                           
  3104                           ;Config register CONFIG6H @ 0x30000B
  3105                           ;	Configuration Register Write Protection bit
  3106                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3107                           ;	Boot Block Write Protection bit
  3108                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3109                           ;	Data EEPROM Write Protection bit
  3110                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3111  30000B                     	org	3145739
  3112  30000B  E0                 	db	224
  3113                           
  3114                           ;Config register CONFIG7L @ 0x30000C
  3115                           ;	Table Read Protection bit
  3116                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3117                           ;	Table Read Protection bit
  3118                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3119                           ;	Table Read Protection bit
  3120                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3121                           ;	Table Read Protection bit
  3122                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3123  30000C                     	org	3145740
  3124  30000C  0F                 	db	15
  3125                           
  3126                           ;Config register CONFIG7H @ 0x30000D
  3127                           ;	Boot Block Table Read Protection bit
  3128                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3129  30000D                     	org	3145741
  3130  30000D  40                 	db	64
  3131                           tosu	equ	0xFFF
  3132                           tosh	equ	0xFFE
  3133                           tosl	equ	0xFFD
  3134                           stkptr	equ	0xFFC
  3135                           pclatu	equ	0xFFB
  3136                           pclath	equ	0xFFA
  3137                           pcl	equ	0xFF9
  3138                           tblptru	equ	0xFF8
  3139                           tblptrh	equ	0xFF7
  3140                           tblptrl	equ	0xFF6
  3141                           tablat	equ	0xFF5
  3142                           prodh	equ	0xFF4
  3143                           prodl	equ	0xFF3
  3144                           indf0	equ	0xFEF
  3145                           postinc0	equ	0xFEE
  3146                           postdec0	equ	0xFED
  3147                           preinc0	equ	0xFEC
  3148                           plusw0	equ	0xFEB
  3149                           fsr0h	equ	0xFEA
  3150                           fsr0l	equ	0xFE9
  3151                           wreg	equ	0xFE8
  3152                           indf1	equ	0xFE7
  3153                           postinc1	equ	0xFE6
  3154                           postdec1	equ	0xFE5
  3155                           preinc1	equ	0xFE4
  3156                           plusw1	equ	0xFE3
  3157                           fsr1h	equ	0xFE2
  3158                           fsr1l	equ	0xFE1
  3159                           bsr	equ	0xFE0
  3160                           indf2	equ	0xFDF
  3161                           postinc2	equ	0xFDE
  3162                           postdec2	equ	0xFDD
  3163                           preinc2	equ	0xFDC
  3164                           plusw2	equ	0xFDB
  3165                           fsr2h	equ	0xFDA
  3166                           fsr2l	equ	0xFD9
  3167                           status	equ	0xFD8

Data Sizes:
    Strings     57
    Constant    0
    Data        0
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      95
    BANK0           160     14      72
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> buffer(BANK0[20]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_3(CODE[19]), STR_2(CODE[19]), STR_1(CODE[19]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 19
		 -> STR_3(CODE[19]), STR_2(CODE[19]), STR_1(CODE[19]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_3(CODE[19]), STR_2(CODE[19]), STR_1(CODE[19]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 20
		 -> buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S720_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> buffer(BANK0[20]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> buffer(BANK0[20]), 

    Lcd_Write_String@a	PTR const unsigned char  size(2) Largest target is 20
		 -> buffer(BANK0[20]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    7955
                                             91 COMRAM     2     2      0
                                              8 BANK0      6     6      0
                           _ADC_Init
                           _ADC_Read
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6138
                                             85 COMRAM     6     0      6
                                              0 BANK0      8     8      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5483
                                             77 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    5130
                                             59 COMRAM    18    12      6
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    3759
                                             27 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     311
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     314
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     2      2     496
                                              4 COMRAM     4     2      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     878
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     308
                                              3 COMRAM     2     2      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             3     1      2      44
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _Lcd_Init
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
             _fputs
               _fputc
             _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      E      48       5       45.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5D      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A7      20        0.0%
DATA                 0      0      A7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Sep 30 15:56:26 2021

                       l41 12B6                         l43 12A0                         l37 13F2  
                       l45 12AE                         l70 121E                         l63 1206  
                       l55 11DA                         l73 13C4                         l82 0E78  
                       l67 121C                         l59 11F0                         l76 1400  
                       l92 13A4                         l86 0E78                         l89 1160  
                       l98 133A                        l551 0C9C                        l561 0F28  
                      l821 10D4                        l558 0CBC                        l568 0F48  
                      l816 1058                        l841 0BCC                        l826 0874  
                      l819 109A                        l860 1012                        l836 0A3A  
                      l828 087C                        l871 1402                        l847 11BA  
                      l791 1270                        l848 11C2                        l868 12FA  
                      l877 1370                        u400 0F5C                        u401 0F58  
                      u410 0F6E                        u411 0F6A                        u500 0E98  
                      u420 0F96                        u501 0E94                        u421 0F92  
                      u510 0EC2                        u430 0FCC                        u511 0EBE  
                      u431 0FC8                        u600 1216                        u520 0EF0  
                      u440 12FA                        u601 1212                        u521 0EEC  
                      u441 12F6                        u450 1364                        u530 1022  
                      u610 084C                        u451 1360                        u531 101E  
                      u611 0848                        u540 1044                        u620 0868  
                      u700 0B4E                        u461 0BD4                        u541 1040  
                      u621 0864                        u701 0B4A                        u470 0BF8  
                      u550 109A                        u630 09B2                        u710 11BA  
                      u471 0BF4                        u551 1096                        u631 09AE  
                      u711 11B6                        u720 1284                        u480 0C22  
                      u560 10A8                        u640 09D0                        u721 1280  
                      u481 0C1E                        u561 10A4                        u641 09CC  
                      u730 12AE                        u570 11D4                        u490 0C62  
                      u650 09EA                        u731 12AA                        u571 11D0  
                      u491 0C5E                        u651 09E6                        u580 11EA  
                      u740 0DBA                        u660 0A04                        u581 11E6  
                      u741 0DB6                        u661 0A00                        u590 1200  
                      u750 0DEE                        u670 0A12                        u591 11FC  
                      u751 0DEA                        u807 138E                        u671 0A0E  
                      u760 0E22                        u680 0A60                        u761 0E1E  
                      u817 139E                        u681 0A5C                        u770 0E56  
                      u690 0AA8                        u827 10F2                        u771 0E52  
                      u691 0AA4                        u780 133A                        u837 110C  
                      u781 1336                        u847 1122                        u857 13B8  
                      u797 0D92                        _pad 1014                        wreg 000FE8  
                     l1301 0E98                       l1311 0F10                       l1303 0EA0  
                     l1313 0F22                       l1305 0EB4                       l1321 1044  
                     l1401 0A60                       l1307 0EC2                       l1251 0F78  
                     l1331 10A8                       l1323 1050                       l1315 1014  
                     l1411 0AF2                       l1403 0A6E                       l1341 11DC  
                     l1501 1150                       l1309 0EF0                       l1253 0F96  
                     l1245 0F4A                       l1261 12C4                       l1333 10BC  
                     l1325 1064                       l1317 1022                       l1421 0B70  
                     l1405 0A80                       l1351 1216                       l1343 11EA  
                     l1503 1156                       l1255 0FCC                       l1247 0F5C  
                     l1263 12D6                       l1271 134C                       l1327 1078  
                     l1319 1036                       l1415 0B2A                       l1407 0A84  
                     l1431 0B96                       l1521 129E                       l1345 11F2  
                     l1337 11C6                       l1505 115C                       l1441 1374  
                     l1281 0BF8                       l1249 0F6E                       l1265 12DA  
                     l1273 1364                       l1329 107C                       l1361 08A4  
                     l1353 083C                       l1433 0BBA                       l1417 0B4E  
                     l1425 0B7C                       l1409 0AA8                       l1601 0D88  
                     l1515 1290                       l1507 1274                       l1347 1200  
                     l1339 11D4                       l1531 0DDC                       l1523 0DAA  
                     l1451 1392                       l1443 1380                       l1291 0C62  
                     l1283 0C00                       l1259 12B8                       l1267 133C  
                     l1371 0936                       l1363 08AC                       l1355 084C  
                     l1427 0B8A                       l1419 0B5C                       l1517 1294  
                     l1509 1284                       l1349 1208                       l1541 0E22  
                     l1533 0DEE                       l1525 0DBA                       l1453 1394  
                     l1445 1382                       l1293 0C82                       l1285 0C14  
                     l1277 0BCE                       l1269 1348                       l1381 09EA  
                     l1373 093C                       l1365 08B4                       l1357 084E  
                     l1461 1162                       l1471 13EA                       l1519 129C  
                     l1391 13AA                       l1439 13F4                       l1551 0E68  
                     l1543 0E34                       l1535 0E00                       l1527 0DCC  
                     l1455 139A                       l1447 138A                       l1295 0C84  
                     l1287 0C22                       l1279 0BDA                       l1383 0A04  
                     l1367 08BA                       l1375 09A0                       l1359 0868  
                     l1463 116A                       l1473 13EE                       l1393 13B0  
                     l1481 1100                       l1553 0E6E                       l1545 0E3A  
                     l1537 0E06                       l1529 0DD2                       l1457 139C  
                     l1449 138C                       l1297 0C96                       l1289 0C34  
                     l1377 09B2                       l1385 0A12                       l1369 0930  
                     l1465 1178                       l1561 1242                       l1395 13B2  
                     l1491 1132                       l1483 1106                       l1475 10D6  
                     l1547 0E44                       l1539 0E10                       l1459 13A2  
                     l1571 131A                       l1299 0E7A                       l1379 09D0  
                     l1467 119E                       l1563 125E                       l1555 1220  
                     l1469 13E6                       l1397 13C2                       l1389 13A8  
                     l1493 1138                       l1485 1116                       l1477 10E2  
                     l1549 0E56                       l1573 131E                       l1557 1232  
                     l1581 0CE4                       l1495 113E                       l1487 111C  
                     l1479 10E8                       l1567 12FC                       l1399 0A3C  
                     l1559 123A                       l1591 0D2E                       l1583 0CF2  
                     l1575 0CBE                       l1497 1144                       l1489 112C  
                     l1569 1308                       l1593 0D4A                       l1585 0CFC  
                     l1577 0CC8                       l1499 114A                       l1595 0D56  
                     l1587 0D18                       l1579 0CD6                       l1597 0D60  
                     l1589 0D24                       l1599 0D7C                       ?_pad 0011  
                     STR_1 0801                       STR_2 0814                       STR_3 0827  
        ?_Lcd_Write_String 0005                       _dbuf 0066                       _main 0CBE  
                     _prec 0064                       _nout 0060                       pad@i 0018  
                     pad@p 0015                       fsr1h 000FE2                       fsr2h 000FDA  
                     indf2 000FDF                       fsr1l 000FE1                       pad@w 001A  
                     fsr2l 000FD9                       _utoa 083C           __end_of_ADC_Init 13F4  
         __end_of_ADC_Read 12B8                       start 0000         ??_Lcd_Write_String 0007  
          __end_of_Lcd_Cmd 13C6               ___param_bank 000000                      ??_pad 0017  
                    ?_main 0001                      _ADRES 000FC3                      ?_utoa 001C  
          __end_of___lodiv 0CBE            __end_of___lomod 0F4A               vfpfcnvrt@fmt 003E  
             vfpfcnvrt@llu 0046    __size_of_Lcd_Set_Cursor 00D2                      _flags 005E  
                    _fputc 0F4A                      _fputs 12B8                      pad@fp 0011  
                    _width 0062                      _putch 1402                      tablat 000FF5  
                    utoa@d 001E                      utoa@i 003A                      utoa@n 0032  
                    utoa@p 002E                      utoa@w 0030                      status 000FD8  
          __end_of_sprintf 1272           ___lodiv@dividend 0001           __end_of_Lcd_Init 1162  
         __end_of_Lcd_Port 1220            __initialization 13C6               __end_of_main 0DA8  
             __end_of_utoa 0A3C                     ??_main 005C                     ??_utoa 0026  
       __size_of_Lcd_Clear 000E              __activetblptr 000001           ___lodiv@quotient 0011  
                   _ADCON0 000FC2                     _ADCON1 000FC1                     _ADCON2 000FC0  
                   ?_fputc 0001                     ?_fputs 000A                     ?_putch 0001  
                ??_Lcd_Cmd 0002    __size_of_Lcd_Write_Char 0034               vfprintf@cfmt 0054  
                ??___lodiv 0011                  ??___lomod 0011                     _buffer 0086  
                   clear_0 13CC                     isa$std 000001                     pad@buf 0013  
            main@valor_ch0 00A2              main@valor_ch1 00A4              main@valor_ch2 00A6  
                   _strlen 133C                     fputc@c 0001                     fputs@c 000E  
                   fputs@i 000F                     fputs@s 000A                  ?_ADC_Init 0001  
                ?_ADC_Read 0001               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                     putch@c 0001  
         __end_of_vfprintf 11C4                     utoa@fp 001C                  ??_sprintf 005C  
          Lcd_Set_Cursor@a 0005            Lcd_Set_Cursor@b 0004            Lcd_Set_Cursor@y 0007  
          Lcd_Set_Cursor@z 0006                 __accesstop 0060    __end_of__initialization 13D6  
        __end_of_Lcd_Clear 1402              ___rparam_used 000001             __pcstackCOMRAM 0001  
            __end_of_fputc 1014              __end_of_fputs 12FC              __end_of_putch 1404  
           _Lcd_Set_Cursor 0DA8                 ??_ADC_Init 0001                 ??_ADC_Read 0003  
                ?_Lcd_Init 0001                  ?_Lcd_Port 0001                    ??_fputc 0005  
                  ??_fputs 000E                    ??_putch 0001                 __pbssBANK0 0060  
__size_of_Lcd_Write_String 0040     __end_of_Lcd_Set_Cursor 0E7A                 ADC_Read@ch 0003  
                  ?_strlen 0001         __size_of_vfpfcnvrt 0192                 ??_Lcd_Init 0004  
               ??_Lcd_Port 0001           ___lomod@dividend 0001             _Lcd_Write_Char 1372  
                  _Lcd_Cmd 13A6                    __Hparam 0000                    __Lparam 0000  
                  ___lodiv 0BCE                    ___lomod 0E7A                  ?_vfprintf 004E  
             __psmallconst 0800                    __pcinit 13C6                    __ramtop 0800  
          ?_Lcd_Set_Cursor 0004                    __ptext0 0CBE                    __ptext1 1220  
                  __ptext2 1162                    __ptext3 0A3C                    __ptext4 083C  
                  __ptext5 1014                    __ptext6 133C                    __ptext7 12B8  
                  __ptext8 0F4A                    __ptext9 1402            __size_of_strlen 0036  
             __size_of_pad 00C2                    _sprintf 1220     __end_of_Lcd_Write_Char 13A6  
     end_of_initialization 13D6                    fputc@fp 0003                    fputs@fp 000C  
        __end_of_vfpfcnvrt 0BCE                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                  Lcd_Port@a 0001  
               ??_vfprintf 0054                    strlen@a 0003                    strlen@s 0001  
                _TRISDbits 000F95          __size_of_ADC_Init 0010          __size_of_ADC_Read 0046  
          ?_Lcd_Write_Char 0001          Lcd_Write_String@a 0005          Lcd_Write_String@i 0007  
                _Lcd_Clear 13F4                vfpfcnvrt@ap 0040                vfpfcnvrt@fp 003C  
         _Lcd_Write_String 12FC             __end_of_strlen 1372        start_initialization 13C6  
          ___lodiv@divisor 0009            ___lodiv@counter 0019                __end_of_pad 10D6  
        __size_of_Lcd_Init 008C          __size_of_Lcd_Port 005C                vfprintf@fmt 0050  
               ?_Lcd_Clear 0001            Lcd_Write_Char@a 0004            Lcd_Write_Char@y 0003  
                 ??_strlen 0003                __pbssCOMRAM 005E              __pcstackBANK0 009A  
                 ?_Lcd_Cmd 0001           ??_Lcd_Set_Cursor 0005                   ?___lodiv 0001  
                 ?___lomod 0001          __size_of_vfprintf 0062            ___lomod@divisor 0009  
              __smallconst 0800            ___lomod@counter 0011                   _ADC_Init 13E4  
                 _ADC_Read 1272                   ?_sprintf 0056             __size_of_fputc 00CA  
           __size_of_fputs 0044             __size_of_putch 0002                   _LATDbits 000F8C  
                 Lcd_Cmd@a 0003                ??_Lcd_Clear 0004                  _vfpfcnvrt 0A3C  
               _ADCON0bits 000FC2           ??_Lcd_Write_Char 0002                   _Lcd_Init 10D6  
                 _Lcd_Port 11C4   __end_of_Lcd_Write_String 133C           __size_of_Lcd_Cmd 0020  
                 __Hrparam 0000                 vfprintf@ap 0052                   __Lrparam 0000  
               vfprintf@fp 004E              ADC_Init@p_ang 0001               __Lsmallconst 0800  
         __size_of___lodiv 00F0           __size_of___lomod 00D0                 ?_vfpfcnvrt 003C  
               sprintf@fmt 0058                   __ptext10 0E7A                   __ptext11 0BCE  
                 __ptext20 13E4                   __ptext12 12FC                   __ptext13 1372  
                 __ptext14 0DA8                   __ptext15 10D6                   __ptext16 13F4  
                 __ptext17 13A6                   __ptext18 11C4                   __ptext19 1272  
         __size_of_sprintf 0052              __size_of_main 00EA              __size_of_utoa 0200  
                 isa$xinst 000000                   _vfprintf 1162         Lcd_Write_Char@temp 0002  
                sprintf@ap 009A                ??_vfpfcnvrt 0042         Lcd_Set_Cursor@temp 0008  
                 sprintf@f 009C                   sprintf@s 0056  
