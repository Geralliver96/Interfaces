

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Oct 26 20:34:28 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    17   000000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52   000000                     _ADCON0	set	4034
    53   000000                     _LATDbits	set	3980
    54   000000                     _LATA	set	3977
    55   000000                     _LATD	set	3980
    56   000000                     _TRISA	set	3986
    57   000000                     _TRISD	set	3989
    58   000000                     _ADCON0bits	set	4034
    59   000000                     _ADRES	set	4035
    60   000000                     _ADCON2	set	4032
    61   000000                     _ADCON1	set	4033
    62                           
    63                           ; #config settings
    64                           
    65                           	psect	cinit
    66   000962                     __pcinit:
    67                           	callstack 0
    68   000962                     start_initialization:
    69                           	callstack 0
    70   000962                     __initialization:
    71                           	callstack 0
    72                           
    73                           ; Clear objects allocated to COMRAM (12 bytes)
    74   000962  EE00  F001         	lfsr	0,__pbssCOMRAM
    75   000966  0E0C               	movlw	12
    76   000968                     clear_0:
    77   000968  6AEE               	clrf	postinc0,c
    78   00096A  06E8               	decf	wreg,f,c
    79   00096C  E1FD               	bnz	clear_0
    80   00096E                     end_of_initialization:
    81                           	callstack 0
    82   00096E                     __end_of__initialization:
    83                           	callstack 0
    84   00096E  0100               	movlb	0
    85   000970  EF01  F004         	goto	_main	;jump to C main() function
    86                           
    87                           	psect	bssCOMRAM
    88   000001                     __pbssCOMRAM:
    89                           	callstack 0
    90   000001                     _valor_ch:
    91                           	callstack 0
    92   000001                     	ds	12
    93                           
    94                           	psect	cstackCOMRAM
    95   00000D                     __pcstackCOMRAM:
    96                           	callstack 0
    97   00000D                     ?_ADC_Read:
    98                           	callstack 0
    99                           
   100                           ; 2 bytes @ 0x0
   101   00000D                     	ds	2
   102   00000F                     ADC_Read@ch:
   103                           	callstack 0
   104                           
   105                           ; 1 bytes @ 0x2
   106   00000F                     	ds	1
   107   000010                     
   108                           ; 1 bytes @ 0x3
   109 ;;
   110 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   111 ;;
   112 ;; *************** function _main *****************
   113 ;; Defined at:
   114 ;;		line 96 in file "ADC_Multichannel.c"
   115 ;; Parameters:    Size  Location     Type
   116 ;;		None
   117 ;; Auto vars:     Size  Location     Type
   118 ;;		None
   119 ;; Return value:  Size  Location     Type
   120 ;;                  1    wreg      void 
   121 ;; Registers used:
   122 ;;		wreg, status,2, status,0, cstack
   123 ;; Tracked objects:
   124 ;;		On entry : 0/0
   125 ;;		On exit  : 0/0
   126 ;;		Unchanged: 0/0
   127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   128 ;;      Params:         0       0       0       0       0       0       0       0       0
   129 ;;      Locals:         0       0       0       0       0       0       0       0       0
   130 ;;      Temps:          0       0       0       0       0       0       0       0       0
   131 ;;      Totals:         0       0       0       0       0       0       0       0       0
   132 ;;Total ram usage:        0 bytes
   133 ;; Hardware stack levels required when called: 2
   134 ;; This function calls:
   135 ;;		_ADC_Init
   136 ;;		_leer_canales_ADC
   137 ;; This function is called by:
   138 ;;		Startup code after reset
   139 ;; This function uses a non-reentrant model
   140 ;;
   141                           
   142                           	psect	text0
   143   000802                     __ptext0:
   144                           	callstack 0
   145   000802                     _main:
   146                           	callstack 29
   147   000802                     
   148                           ;ADC_Multichannel.c: 98:     ADC_Init();
   149   000802  ECBA  F004         	call	_ADC_Init	;wreg free
   150   000806                     
   151                           ;ADC_Multichannel.c: 99:     TRISD = 0x00;
   152   000806  0E00               	movlw	0
   153   000808  6E95               	movwf	149,c	;volatile
   154   00080A                     
   155                           ;ADC_Multichannel.c: 100:     TRISA = 0b00101111;
   156   00080A  0E2F               	movlw	47
   157   00080C  6E92               	movwf	146,c	;volatile
   158   00080E                     
   159                           ;ADC_Multichannel.c: 101:     LATD = 0x00;
   160   00080E  0E00               	movlw	0
   161   000810  6E8C               	movwf	140,c	;volatile
   162   000812                     
   163                           ;ADC_Multichannel.c: 102:     LATA = 0x00;
   164   000812  0E00               	movlw	0
   165   000814  6E89               	movwf	137,c	;volatile
   166   000816                     
   167                           ;ADC_Multichannel.c: 104:       leer_canales_ADC();
   168   000816  EC4B  F004         	call	_leer_canales_ADC	;wreg free
   169   00081A                     
   170                           ;ADC_Multichannel.c: 106:         if(valor_ch[1] > valor_ch[0]){
   171   00081A  5003               	movf	(_valor_ch+2)^0,w,c
   172   00081C  5C01               	subwf	_valor_ch^0,w,c
   173   00081E  5004               	movf	(_valor_ch+3)^0,w,c
   174   000820  5802               	subwfb	(_valor_ch+1)^0,w,c
   175   000822  B0D8               	btfsc	status,0,c
   176   000824  EF16  F004         	goto	u91
   177   000828  EF18  F004         	goto	u90
   178   00082C                     u91:
   179   00082C  EF1B  F004         	goto	l28
   180   000830                     u90:
   181   000830                     
   182                           ;ADC_Multichannel.c: 107:             LATDbits.LATD0 = 1;
   183   000830  808C               	bsf	140,0,c	;volatile
   184                           
   185                           ;ADC_Multichannel.c: 108:         }else{
   186   000832  EF1C  F004         	goto	l849
   187   000836                     l28:
   188                           
   189                           ;ADC_Multichannel.c: 109:             LATDbits.LATD0 = 0;
   190   000836  908C               	bcf	140,0,c	;volatile
   191   000838                     l849:
   192                           
   193                           ;ADC_Multichannel.c: 112:         if(valor_ch[2] > valor_ch[0]){
   194   000838  5005               	movf	(_valor_ch+4)^0,w,c
   195   00083A  5C01               	subwf	_valor_ch^0,w,c
   196   00083C  5006               	movf	(_valor_ch+5)^0,w,c
   197   00083E  5802               	subwfb	(_valor_ch+1)^0,w,c
   198   000840  B0D8               	btfsc	status,0,c
   199   000842  EF25  F004         	goto	u101
   200   000846  EF27  F004         	goto	u100
   201   00084A                     u101:
   202   00084A  EF2A  F004         	goto	l30
   203   00084E                     u100:
   204   00084E                     
   205                           ;ADC_Multichannel.c: 113:             LATDbits.LATD1 = 1;
   206   00084E  828C               	bsf	140,1,c	;volatile
   207                           
   208                           ;ADC_Multichannel.c: 114:         }else{
   209   000850  EF2B  F004         	goto	l853
   210   000854                     l30:
   211                           
   212                           ;ADC_Multichannel.c: 115:             LATDbits.LATD1 = 0;
   213   000854  928C               	bcf	140,1,c	;volatile
   214   000856                     l853:
   215                           
   216                           ;ADC_Multichannel.c: 118:         if(valor_ch[3] > valor_ch[0]){
   217   000856  5007               	movf	(_valor_ch+6)^0,w,c
   218   000858  5C01               	subwf	_valor_ch^0,w,c
   219   00085A  5008               	movf	(_valor_ch+7)^0,w,c
   220   00085C  5802               	subwfb	(_valor_ch+1)^0,w,c
   221   00085E  B0D8               	btfsc	status,0,c
   222   000860  EF34  F004         	goto	u111
   223   000864  EF36  F004         	goto	u110
   224   000868                     u111:
   225   000868  EF39  F004         	goto	l32
   226   00086C                     u110:
   227   00086C                     
   228                           ;ADC_Multichannel.c: 119:             LATDbits.LATD2 = 1;
   229   00086C  848C               	bsf	140,2,c	;volatile
   230                           
   231                           ;ADC_Multichannel.c: 120:         }else{
   232   00086E  EF3A  F004         	goto	l857
   233   000872                     l32:
   234                           
   235                           ;ADC_Multichannel.c: 121:             LATDbits.LATD2 = 0;
   236   000872  948C               	bcf	140,2,c	;volatile
   237   000874                     l857:
   238                           
   239                           ;ADC_Multichannel.c: 124:         if(valor_ch[5] > valor_ch[0]){
   240   000874  500B               	movf	(_valor_ch+10)^0,w,c
   241   000876  5C01               	subwf	_valor_ch^0,w,c
   242   000878  500C               	movf	(_valor_ch+11)^0,w,c
   243   00087A  5802               	subwfb	(_valor_ch+1)^0,w,c
   244   00087C  B0D8               	btfsc	status,0,c
   245   00087E  EF43  F004         	goto	u121
   246   000882  EF45  F004         	goto	u120
   247   000886                     u121:
   248   000886  EF48  F004         	goto	l34
   249   00088A                     u120:
   250   00088A                     
   251                           ;ADC_Multichannel.c: 125:             LATDbits.LATD4 = 1;
   252   00088A  888C               	bsf	140,4,c	;volatile
   253                           
   254                           ;ADC_Multichannel.c: 126:         }else{
   255   00088C  EF49  F004         	goto	l36
   256   000890                     l34:
   257                           
   258                           ;ADC_Multichannel.c: 127:             LATDbits.LATD4 = 0;
   259   000890  988C               	bcf	140,4,c	;volatile
   260   000892                     l36:
   261   000892  EF00  F000         	goto	start
   262   000896                     __end_of_main:
   263                           	callstack 0
   264                           
   265 ;; *************** function _leer_canales_ADC *****************
   266 ;; Defined at:
   267 ;;		line 71 in file "ADC_Multichannel.c"
   268 ;; Parameters:    Size  Location     Type
   269 ;;		None
   270 ;; Auto vars:     Size  Location     Type
   271 ;;		None
   272 ;; Return value:  Size  Location     Type
   273 ;;                  1    wreg      void 
   274 ;; Registers used:
   275 ;;		wreg, status,2, status,0, cstack
   276 ;; Tracked objects:
   277 ;;		On entry : 0/0
   278 ;;		On exit  : 0/0
   279 ;;		Unchanged: 0/0
   280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   281 ;;      Params:         0       0       0       0       0       0       0       0       0
   282 ;;      Locals:         0       0       0       0       0       0       0       0       0
   283 ;;      Temps:          0       0       0       0       0       0       0       0       0
   284 ;;      Totals:         0       0       0       0       0       0       0       0       0
   285 ;;Total ram usage:        0 bytes
   286 ;; Hardware stack levels used: 1
   287 ;; Hardware stack levels required when called: 1
   288 ;; This function calls:
   289 ;;		_ADC_Read
   290 ;; This function is called by:
   291 ;;		_main
   292 ;; This function uses a non-reentrant model
   293 ;;
   294                           
   295                           	psect	text1
   296   000896                     __ptext1:
   297                           	callstack 0
   298   000896                     _leer_canales_ADC:
   299                           	callstack 29
   300   000896                     
   301                           ;ADC_Multichannel.c: 73:   ADCON0bits.CHS = 0;
   302   000896  0EC3               	movlw	-61
   303   000898  16C2               	andwf	194,f,c	;volatile
   304   00089A                     
   305                           ;ADC_Multichannel.c: 74:   _delay((unsigned long)((10)*(20000000/4000000.0)));
   306   00089A  0E10               	movlw	16
   307   00089C                     u137:
   308   00089C  2EE8               	decfsz	wreg,f,c
   309   00089E  D7FE               	bra	u137
   310   0008A0  D000               	nop2	
   311   0008A2                     
   312                           ;ADC_Multichannel.c: 75:   valor_ch[0] = ADC_Read(0);
   313   0008A2  0E00               	movlw	0
   314   0008A4  EC95  F004         	call	_ADC_Read
   315   0008A8  C00D  F001         	movff	?_ADC_Read,_valor_ch
   316   0008AC  C00E  F002         	movff	?_ADC_Read+1,_valor_ch+1
   317   0008B0                     
   318                           ;ADC_Multichannel.c: 77:   ADCON0bits.CHS = 1;
   319   0008B0  50C2               	movf	194,w,c	;volatile
   320   0008B2  0BC3               	andlw	-61
   321   0008B4  0904               	iorlw	4
   322   0008B6  6EC2               	movwf	194,c	;volatile
   323   0008B8                     
   324                           ;ADC_Multichannel.c: 78:   _delay((unsigned long)((10)*(20000000/4000000.0)));
   325   0008B8  0E10               	movlw	16
   326   0008BA                     u147:
   327   0008BA  2EE8               	decfsz	wreg,f,c
   328   0008BC  D7FE               	bra	u147
   329   0008BE  D000               	nop2	
   330                           
   331                           ;ADC_Multichannel.c: 79:   valor_ch[1] = ADC_Read(1);
   332   0008C0  0E01               	movlw	1
   333   0008C2  EC95  F004         	call	_ADC_Read
   334   0008C6  C00D  F003         	movff	?_ADC_Read,_valor_ch+2
   335   0008CA  C00E  F004         	movff	?_ADC_Read+1,_valor_ch+3
   336   0008CE                     
   337                           ;ADC_Multichannel.c: 81:    ADCON0bits.CHS = 2;
   338   0008CE  50C2               	movf	194,w,c	;volatile
   339   0008D0  0BC3               	andlw	-61
   340   0008D2  0908               	iorlw	8
   341   0008D4  6EC2               	movwf	194,c	;volatile
   342   0008D6                     
   343                           ;ADC_Multichannel.c: 82:   _delay((unsigned long)((10)*(20000000/4000000.0)));
   344   0008D6  0E10               	movlw	16
   345   0008D8                     u157:
   346   0008D8  2EE8               	decfsz	wreg,f,c
   347   0008DA  D7FE               	bra	u157
   348   0008DC  D000               	nop2	
   349   0008DE                     
   350                           ;ADC_Multichannel.c: 83:   valor_ch[2] = ADC_Read(2);
   351   0008DE  0E02               	movlw	2
   352   0008E0  EC95  F004         	call	_ADC_Read
   353   0008E4  C00D  F005         	movff	?_ADC_Read,_valor_ch+4
   354   0008E8  C00E  F006         	movff	?_ADC_Read+1,_valor_ch+5
   355   0008EC                     
   356                           ;ADC_Multichannel.c: 85:    ADCON0bits.CHS = 3;
   357   0008EC  50C2               	movf	194,w,c	;volatile
   358   0008EE  0BC3               	andlw	-61
   359   0008F0  090C               	iorlw	12
   360   0008F2  6EC2               	movwf	194,c	;volatile
   361                           
   362                           ;ADC_Multichannel.c: 86:   _delay((unsigned long)((10)*(20000000/4000000.0)));
   363   0008F4  0E10               	movlw	16
   364   0008F6                     u167:
   365   0008F6  2EE8               	decfsz	wreg,f,c
   366   0008F8  D7FE               	bra	u167
   367   0008FA  D000               	nop2	
   368   0008FC                     
   369                           ;ADC_Multichannel.c: 87:   valor_ch[3] = ADC_Read(3);
   370   0008FC  0E03               	movlw	3
   371   0008FE  EC95  F004         	call	_ADC_Read
   372   000902  C00D  F007         	movff	?_ADC_Read,_valor_ch+6
   373   000906  C00E  F008         	movff	?_ADC_Read+1,_valor_ch+7
   374   00090A                     
   375                           ;ADC_Multichannel.c: 89:    ADCON0bits.CHS = 5;
   376   00090A  50C2               	movf	194,w,c	;volatile
   377   00090C  0BC3               	andlw	-61
   378   00090E  0914               	iorlw	20
   379   000910  6EC2               	movwf	194,c	;volatile
   380   000912                     
   381                           ;ADC_Multichannel.c: 90:   _delay((unsigned long)((10)*(20000000/4000000.0)));
   382   000912  0E10               	movlw	16
   383   000914                     u177:
   384   000914  2EE8               	decfsz	wreg,f,c
   385   000916  D7FE               	bra	u177
   386   000918  D000               	nop2	
   387   00091A                     
   388                           ;ADC_Multichannel.c: 91:   valor_ch[5] = ADC_Read(5);
   389   00091A  0E05               	movlw	5
   390   00091C  EC95  F004         	call	_ADC_Read
   391   000920  C00D  F00B         	movff	?_ADC_Read,_valor_ch+10
   392   000924  C00E  F00C         	movff	?_ADC_Read+1,_valor_ch+11
   393   000928  0012               	return		;funcret
   394   00092A                     __end_of_leer_canales_ADC:
   395                           	callstack 0
   396                           
   397 ;; *************** function _ADC_Read *****************
   398 ;; Defined at:
   399 ;;		line 13 in file "ADC_Leds.c"
   400 ;; Parameters:    Size  Location     Type
   401 ;;  ch              1    wreg     unsigned char 
   402 ;; Auto vars:     Size  Location     Type
   403 ;;  ch              1    2[COMRAM] unsigned char 
   404 ;; Return value:  Size  Location     Type
   405 ;;                  2    0[COMRAM] unsigned int 
   406 ;; Registers used:
   407 ;;		wreg, status,2, status,0
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   413 ;;      Params:         2       0       0       0       0       0       0       0       0
   414 ;;      Locals:         1       0       0       0       0       0       0       0       0
   415 ;;      Temps:          0       0       0       0       0       0       0       0       0
   416 ;;      Totals:         3       0       0       0       0       0       0       0       0
   417 ;;Total ram usage:        3 bytes
   418 ;; Hardware stack levels used: 1
   419 ;; This function calls:
   420 ;;		Nothing
   421 ;; This function is called by:
   422 ;;		_leer_canales_ADC
   423 ;; This function uses a non-reentrant model
   424 ;;
   425                           
   426                           	psect	text2
   427   00092A                     __ptext2:
   428                           	callstack 0
   429   00092A                     _ADC_Read:
   430                           	callstack 29
   431                           
   432                           ;incstack = 0
   433                           ;ADC_Read@ch stored from wreg
   434   00092A  6E0F               	movwf	ADC_Read@ch^0,c
   435   00092C                     
   436                           ;ADC_Leds.c: 14:     if(ch>13){
   437   00092C  0E0D               	movlw	13
   438   00092E  640F               	cpfsgt	ADC_Read@ch^0,c
   439   000930  EF9C  F004         	goto	u71
   440   000934  EF9E  F004         	goto	u70
   441   000938                     u71:
   442   000938  EFA4  F004         	goto	l52
   443   00093C                     u70:
   444   00093C                     
   445                           ;ADC_Leds.c: 15:         return 0;
   446   00093C  0E00               	movlw	0
   447   00093E  6E0E               	movwf	(?_ADC_Read+1)^0,c
   448   000940  0E00               	movlw	0
   449   000942  6E0D               	movwf	?_ADC_Read^0,c
   450   000944  EFB0  F004         	goto	l53
   451   000948                     l52:
   452                           
   453                           ;ADC_Leds.c: 17:        ADCON0bits.GO_DONE = 1;
   454   000948  82C2               	bsf	194,1,c	;volatile
   455   00094A                     l55:
   456   00094A  B2C2               	btfsc	194,1,c	;volatile
   457   00094C  EFAA  F004         	goto	u81
   458   000950  EFAC  F004         	goto	u80
   459   000954                     u81:
   460   000954  EFA5  F004         	goto	l55
   461   000958                     u80:
   462   000958                     
   463                           ;ADC_Leds.c: 21:   return ADRES;
   464   000958  CFC3 F00D          	movff	4035,?_ADC_Read	;volatile
   465   00095C  CFC4 F00E          	movff	4036,?_ADC_Read+1	;volatile
   466   000960                     l53:
   467   000960  0012               	return		;funcret
   468   000962                     __end_of_ADC_Read:
   469                           	callstack 0
   470                           
   471 ;; *************** function _ADC_Init *****************
   472 ;; Defined at:
   473 ;;		line 4 in file "ADC_Leds.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;		None
   476 ;; Auto vars:     Size  Location     Type
   477 ;;		None
   478 ;; Return value:  Size  Location     Type
   479 ;;                  1    wreg      void 
   480 ;; Registers used:
   481 ;;		wreg, status,2
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   487 ;;      Params:         0       0       0       0       0       0       0       0       0
   488 ;;      Locals:         0       0       0       0       0       0       0       0       0
   489 ;;      Temps:          0       0       0       0       0       0       0       0       0
   490 ;;      Totals:         0       0       0       0       0       0       0       0       0
   491 ;;Total ram usage:        0 bytes
   492 ;; Hardware stack levels used: 1
   493 ;; This function calls:
   494 ;;		Nothing
   495 ;; This function is called by:
   496 ;;		_main
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           	psect	text3
   501   000974                     __ptext3:
   502                           	callstack 0
   503   000974                     _ADC_Init:
   504                           	callstack 30
   505   000974                     
   506                           ;ADC_Leds.c: 6:     ADCON0 = 0x00;
   507   000974  0E00               	movlw	0
   508   000976  6EC2               	movwf	194,c	;volatile
   509                           
   510                           ;ADC_Leds.c: 7:   ADCON1 = 0x0A;
   511   000978  0E0A               	movlw	10
   512   00097A  6EC1               	movwf	193,c	;volatile
   513                           
   514                           ;ADC_Leds.c: 8:   ADCON2 = 0b10010111;
   515   00097C  0E97               	movlw	151
   516   00097E  6EC0               	movwf	192,c	;volatile
   517   000980                     
   518                           ;ADC_Leds.c: 10:   ADCON0bits.ADON = 1;
   519   000980  80C2               	bsf	194,0,c	;volatile
   520   000982  0012               	return		;funcret
   521   000984                     __end_of_ADC_Init:
   522                           	callstack 0
   523                           
   524                           	psect	smallconst
   525   000800                     __psmallconst:
   526                           	callstack 0
   527   000800  00                 	db	0
   528   000801  00                 	db	0	; dummy byte at the end
   529   000000                     
   530                           	psect	rparam
   531   000000                     
   532                           	psect	idloc
   533                           
   534                           ;Config register IDLOC0 @ 0x200000
   535                           ;	unspecified, using default values
   536   200000                     	org	2097152
   537   200000  FF                 	db	255
   538                           
   539                           ;Config register IDLOC1 @ 0x200001
   540                           ;	unspecified, using default values
   541   200001                     	org	2097153
   542   200001  FF                 	db	255
   543                           
   544                           ;Config register IDLOC2 @ 0x200002
   545                           ;	unspecified, using default values
   546   200002                     	org	2097154
   547   200002  FF                 	db	255
   548                           
   549                           ;Config register IDLOC3 @ 0x200003
   550                           ;	unspecified, using default values
   551   200003                     	org	2097155
   552   200003  FF                 	db	255
   553                           
   554                           ;Config register IDLOC4 @ 0x200004
   555                           ;	unspecified, using default values
   556   200004                     	org	2097156
   557   200004  FF                 	db	255
   558                           
   559                           ;Config register IDLOC5 @ 0x200005
   560                           ;	unspecified, using default values
   561   200005                     	org	2097157
   562   200005  FF                 	db	255
   563                           
   564                           ;Config register IDLOC6 @ 0x200006
   565                           ;	unspecified, using default values
   566   200006                     	org	2097158
   567   200006  FF                 	db	255
   568                           
   569                           ;Config register IDLOC7 @ 0x200007
   570                           ;	unspecified, using default values
   571   200007                     	org	2097159
   572   200007  FF                 	db	255
   573                           
   574                           	psect	config
   575                           
   576                           ;Config register CONFIG1L @ 0x300000
   577                           ;	PLL Prescaler Selection bits
   578                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   579                           ;	System Clock Postscaler Selection bits
   580                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   581                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   582                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   583   300000                     	org	3145728
   584   300000  00                 	db	0
   585                           
   586                           ;Config register CONFIG1H @ 0x300001
   587                           ;	Oscillator Selection bits
   588                           ;	FOSC = HS, HS oscillator (HS)
   589                           ;	Fail-Safe Clock Monitor Enable bit
   590                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   591                           ;	Internal/External Oscillator Switchover bit
   592                           ;	IESO = OFF, Oscillator Switchover mode disabled
   593   300001                     	org	3145729
   594   300001  0C                 	db	12
   595                           
   596                           ;Config register CONFIG2L @ 0x300002
   597                           ;	Power-up Timer Enable bit
   598                           ;	PWRT = OFF, PWRT disabled
   599                           ;	Brown-out Reset Enable bits
   600                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   601                           ;	Brown-out Reset Voltage bits
   602                           ;	BORV = 3, Minimum setting 2.05V
   603                           ;	USB Voltage Regulator Enable bit
   604                           ;	VREGEN = OFF, USB voltage regulator disabled
   605   300002                     	org	3145730
   606   300002  1F                 	db	31
   607                           
   608                           ;Config register CONFIG2H @ 0x300003
   609                           ;	Watchdog Timer Enable bit
   610                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   611                           ;	Watchdog Timer Postscale Select bits
   612                           ;	WDTPS = 32768, 1:32768
   613   300003                     	org	3145731
   614   300003  1E                 	db	30
   615                           
   616                           ; Padding undefined space
   617   300004                     	org	3145732
   618   300004  FF                 	db	255
   619                           
   620                           ;Config register CONFIG3H @ 0x300005
   621                           ;	CCP2 MUX bit
   622                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   623                           ;	PORTB A/D Enable bit
   624                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   625                           ;	Low-Power Timer 1 Oscillator Enable bit
   626                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   627                           ;	MCLR Pin Enable bit
   628                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   629   300005                     	org	3145733
   630   300005  83                 	db	131
   631                           
   632                           ;Config register CONFIG4L @ 0x300006
   633                           ;	Stack Full/Underflow Reset Enable bit
   634                           ;	STVREN = ON, Stack full/underflow will cause Reset
   635                           ;	Single-Supply ICSP Enable bit
   636                           ;	LVP = ON, Single-Supply ICSP enabled
   637                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   638                           ;	ICPRT = OFF, ICPORT disabled
   639                           ;	Extended Instruction Set Enable bit
   640                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   641                           ;	Background Debugger Enable bit
   642                           ;	DEBUG = 0x1, unprogrammed default
   643   300006                     	org	3145734
   644   300006  85                 	db	133
   645                           
   646                           ; Padding undefined space
   647   300007                     	org	3145735
   648   300007  FF                 	db	255
   649                           
   650                           ;Config register CONFIG5L @ 0x300008
   651                           ;	Code Protection bit
   652                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   653                           ;	Code Protection bit
   654                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   655                           ;	Code Protection bit
   656                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   657                           ;	Code Protection bit
   658                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   659   300008                     	org	3145736
   660   300008  0F                 	db	15
   661                           
   662                           ;Config register CONFIG5H @ 0x300009
   663                           ;	Boot Block Code Protection bit
   664                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   665                           ;	Data EEPROM Code Protection bit
   666                           ;	CPD = OFF, Data EEPROM is not code-protected
   667   300009                     	org	3145737
   668   300009  C0                 	db	192
   669                           
   670                           ;Config register CONFIG6L @ 0x30000A
   671                           ;	Write Protection bit
   672                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   673                           ;	Write Protection bit
   674                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   675                           ;	Write Protection bit
   676                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   677                           ;	Write Protection bit
   678                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   679   30000A                     	org	3145738
   680   30000A  0F                 	db	15
   681                           
   682                           ;Config register CONFIG6H @ 0x30000B
   683                           ;	Configuration Register Write Protection bit
   684                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   685                           ;	Boot Block Write Protection bit
   686                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   687                           ;	Data EEPROM Write Protection bit
   688                           ;	WRTD = OFF, Data EEPROM is not write-protected
   689   30000B                     	org	3145739
   690   30000B  E0                 	db	224
   691                           
   692                           ;Config register CONFIG7L @ 0x30000C
   693                           ;	Table Read Protection bit
   694                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   695                           ;	Table Read Protection bit
   696                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   697                           ;	Table Read Protection bit
   698                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   699                           ;	Table Read Protection bit
   700                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   701   30000C                     	org	3145740
   702   30000C  0F                 	db	15
   703                           
   704                           ;Config register CONFIG7H @ 0x30000D
   705                           ;	Boot Block Table Read Protection bit
   706                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   707   30000D                     	org	3145741
   708   30000D  40                 	db	64
   709                           tosu	equ	0xFFF
   710                           tosh	equ	0xFFE
   711                           tosl	equ	0xFFD
   712                           stkptr	equ	0xFFC
   713                           pclatu	equ	0xFFB
   714                           pclath	equ	0xFFA
   715                           pcl	equ	0xFF9
   716                           tblptru	equ	0xFF8
   717                           tblptrh	equ	0xFF7
   718                           tblptrl	equ	0xFF6
   719                           tablat	equ	0xFF5
   720                           prodh	equ	0xFF4
   721                           prodl	equ	0xFF3
   722                           indf0	equ	0xFEF
   723                           postinc0	equ	0xFEE
   724                           postdec0	equ	0xFED
   725                           preinc0	equ	0xFEC
   726                           plusw0	equ	0xFEB
   727                           fsr0h	equ	0xFEA
   728                           fsr0l	equ	0xFE9
   729                           wreg	equ	0xFE8
   730                           indf1	equ	0xFE7
   731                           postinc1	equ	0xFE6
   732                           postdec1	equ	0xFE5
   733                           preinc1	equ	0xFE4
   734                           plusw1	equ	0xFE3
   735                           fsr1h	equ	0xFE2
   736                           fsr1l	equ	0xFE1
   737                           bsr	equ	0xFE0
   738                           indf2	equ	0xFDF
   739                           postinc2	equ	0xFDE
   740                           postdec2	equ	0xFDD
   741                           preinc2	equ	0xFDC
   742                           plusw2	equ	0xFDB
   743                           fsr2h	equ	0xFDA
   744                           fsr2l	equ	0xFD9
   745                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      3      15
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _leer_canales_ADC->_ADC_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      22
                           _ADC_Init
                   _leer_canales_ADC
 ---------------------------------------------------------------------------------
 (1) _leer_canales_ADC                                     0     0      0      22
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             3     1      2      22
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _leer_canales_ADC
     _ADC_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      3       F       1       15.8%
BITBIGSFRh          3B      0       0      21        0.0%
BITBIGSFRlh         2A      0       0      22        0.0%
BITBIGSFRlllll      29      0       0      26        0.0%
BITBIGSFRlllh        5      0       0      24        0.0%
BITBIGSFRllllh       2      0       0      25        0.0%
BITBIGSFRllh         2      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       F       3        0.0%
DATA                 0      0       F       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Oct 26 20:34:28 2023

__end_of_leer_canales_ADC 092A                        l30 0854                        l23 0928  
                      l32 0872                        l34 0890                        l52 0948  
                      l36 0892                        l28 0836                        l53 0960  
                      l55 094A                        l49 0982                        l57 0958  
                      u70 093C                        u71 0938                        u80 0958  
                      u81 0954                        u90 0830                        u91 082C  
                     l801 093C                       l811 08A2                       l821 08DE  
                     l813 08B0                       l831 091A                       l823 08EC  
                     l815 08B8                       l807 0896                       l825 08FC  
                     l817 08CE                       l809 089A                       l841 0812  
                     l833 0802                       l827 090A                       l819 08D6  
                     l851 084E                       l843 0816                       l835 0806  
                     l829 0912                       l853 0856                       l845 081A  
                     l837 080A                       l767 0974                       l855 086C  
                     l847 0830                       l839 080E                       l769 0980  
                     l857 0874                       l849 0838                       l859 088A  
                     l799 092C                       u100 084E                       u101 084A  
                     u110 086C                       u111 0868                       u120 088A  
                     u121 0886                       u137 089C                       u147 08BA  
                     u157 08D8                       u167 08F6                       u177 0914  
                     wreg 0FE8                      _LATA 0F89                      _LATD 0F8C  
                    _main 0802          __end_of_ADC_Init 0984          __end_of_ADC_Read 0962  
                    start 0000              ___param_bank 0000                     ?_main 000D  
                   _ADRES 0FC3                     _TRISA 0F92                     _TRISD 0F95  
                   status 0FD8           __initialization 0962              __end_of_main 0896  
                  ??_main 0010             __activetblptr 0000                    _ADCON0 0FC2  
                  _ADCON1 0FC1                    _ADCON2 0FC0                    clear_0 0968  
                  isa$std 0001                 ?_ADC_Init 000D                 ?_ADC_Read 000D  
            __mediumconst 0000                __accesstop 0060   __end_of__initialization 096E  
           ___rparam_used 0001            __pcstackCOMRAM 000D         ?_leer_canales_ADC 000D  
      ??_leer_canales_ADC 0010                ??_ADC_Init 000D                ??_ADC_Read 000F  
              ADC_Read@ch 000F                   __Hparam 0000                   __Lparam 0000  
            __psmallconst 0800                   __pcinit 0962                   __ramtop 0800  
                 __ptext0 0802                   __ptext1 0896                   __ptext2 092A  
                 __ptext3 0974      end_of_initialization 096E                   postinc0 0FEE  
     start_initialization 0962               __pbssCOMRAM 0001               __smallconst 0800  
                _ADC_Init 0974                  _ADC_Read 092A                  _LATDbits 0F8C  
              _ADCON0bits 0FC2          _leer_canales_ADC 0896                  __Hrparam 0000  
                __Lrparam 0000                  _valor_ch 0001                  isa$xinst 0000  
